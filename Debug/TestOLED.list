
TestOLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  08006600  08006600  00016600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007460  08007460  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08007460  08007460  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007460  08007460  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08007468  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000128  08007590  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08007590  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d755  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002142  00000000  00000000  0002d8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0002f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039f8  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107cd  00000000  00000000  00034f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfed  00000000  00000000  000456ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d26da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000d272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	080065e4 	.word	0x080065e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	080065e4 	.word	0x080065e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	615a      	str	r2, [r3, #20]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b4a:	699a      	ldr	r2, [r3, #24]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	00000000 	.word	0x00000000

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	double value = 123.456;
 8000b6e:	a3b6      	add	r3, pc, #728	; (adr r3, 8000e48 <main+0x2e0>)
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t CH1_DC = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
	//value = arm_sin_f32(value);
	//value = arm_sin_f32(value);
	char buffer[10];
	char angleX[10];
	dtostrf(value, 10, 3, buffer);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2303      	movs	r3, #3
 8000b84:	220a      	movs	r2, #10
 8000b86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b8a:	f000 fbd5 	bl	8001338 <dtostrf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f001 fd39 	bl	8002604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 fa03 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 fb67 	bl	8001268 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b9a:	f000 fa3b 	bl	8001014 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b9e:	f000 fb0f 	bl	80011c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ba2:	f000 fa89 	bl	80010b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //GPIOB->MODER |= (2<<16) | (2<<18);
  MPU6050_Init(&hi2c1);
 8000ba6:	48b8      	ldr	r0, [pc, #736]	; (8000e88 <main+0x320>)
 8000ba8:	f000 fd41 	bl	800162e <MPU6050_Init>
  SSD1306_Init();  // initialise
 8000bac:	f001 f8ae 	bl	8001d0c <SSD1306_Init>

  /*----------------  OLED setup ---------------------------------------*/

    SSD1306_GotoXY (0,0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f001 fa12 	bl	8001fdc <SSD1306_GotoXY>
    SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	49b4      	ldr	r1, [pc, #720]	; (8000e8c <main+0x324>)
 8000bbc:	48b4      	ldr	r0, [pc, #720]	; (8000e90 <main+0x328>)
 8000bbe:	f001 faa3 	bl	8002108 <SSD1306_Puts>
    SSD1306_GotoXY (10, 30);
 8000bc2:	211e      	movs	r1, #30
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f001 fa09 	bl	8001fdc <SSD1306_GotoXY>
    SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	49af      	ldr	r1, [pc, #700]	; (8000e8c <main+0x324>)
 8000bce:	48b1      	ldr	r0, [pc, #708]	; (8000e94 <main+0x32c>)
 8000bd0:	f001 fa9a 	bl	8002108 <SSD1306_Puts>
    SSD1306_UpdateScreen(); //display
 8000bd4:	f001 f95e 	bl	8001e94 <SSD1306_UpdateScreen>

    HAL_Delay (2000);
 8000bd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bdc:	f001 fd74 	bl	80026c8 <HAL_Delay>
    SSD1306_GotoXY (0,0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2000      	movs	r0, #0
 8000be4:	f001 f9fa 	bl	8001fdc <SSD1306_GotoXY>
    SSD1306_Puts (buffer, &Font_11x18, 1);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2201      	movs	r2, #1
 8000bee:	49a7      	ldr	r1, [pc, #668]	; (8000e8c <main+0x324>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fa89 	bl	8002108 <SSD1306_Puts>
    SSD1306_UpdateScreen(); //display
 8000bf6:	f001 f94d 	bl	8001e94 <SSD1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*----------------  Getting Data From MPU6050 ---------------------------------------*/
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8000bfa:	49a7      	ldr	r1, [pc, #668]	; (8000e98 <main+0x330>)
 8000bfc:	48a2      	ldr	r0, [pc, #648]	; (8000e88 <main+0x320>)
 8000bfe:	f000 fd6f 	bl	80016e0 <MPU6050_Read_All>
		//MPU6050_Read_Gyro(&hi2c1, &MPU6050);
		KalmanAngleX = MPU6050.KalmanAngleX;
 8000c02:	4ba5      	ldr	r3, [pc, #660]	; (8000e98 <main+0x330>)
 8000c04:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000c08:	49a4      	ldr	r1, [pc, #656]	; (8000e9c <main+0x334>)
 8000c0a:	e9c1 2300 	strd	r2, r3, [r1]
		dtostrf(KalmanAngleX, 10, 3, angleX);
 8000c0e:	4ba3      	ldr	r3, [pc, #652]	; (8000e9c <main+0x334>)
 8000c10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2303      	movs	r3, #3
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	f000 fb8c 	bl	8001338 <dtostrf>
		SSD1306_GotoXY (0,0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f001 f9da 	bl	8001fdc <SSD1306_GotoXY>
		SSD1306_Puts (angleX, &Font_11x18, 1);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4997      	ldr	r1, [pc, #604]	; (8000e8c <main+0x324>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fa6a 	bl	8002108 <SSD1306_Puts>
		Gx = MPU6050.Gx;
 8000c34:	4b98      	ldr	r3, [pc, #608]	; (8000e98 <main+0x330>)
 8000c36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000c3a:	4999      	ldr	r1, [pc, #612]	; (8000ea0 <main+0x338>)
 8000c3c:	e9c1 2300 	strd	r2, r3, [r1]
		dtostrf(Gx, 10, 3, angleX);
 8000c40:	4b97      	ldr	r3, [pc, #604]	; (8000ea0 <main+0x338>)
 8000c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	f000 fb73 	bl	8001338 <dtostrf>
		SSD1306_GotoXY (10,30);
 8000c52:	211e      	movs	r1, #30
 8000c54:	200a      	movs	r0, #10
 8000c56:	f001 f9c1 	bl	8001fdc <SSD1306_GotoXY>
		SSD1306_Puts (angleX, &Font_11x18, 1);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	498b      	ldr	r1, [pc, #556]	; (8000e8c <main+0x324>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fa51 	bl	8002108 <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 8000c66:	f001 f915 	bl	8001e94 <SSD1306_UpdateScreen>
		/*---------------- Low-pass filter for encoder ---------------------------------------*/
		 speed_L *= 0.65;
 8000c6a:	4b8e      	ldr	r3, [pc, #568]	; (8000ea4 <main+0x33c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fbb8 	bl	80003e4 <__aeabi_ui2d>
 8000c74:	a376      	add	r3, pc, #472	; (adr r3, 8000e50 <main+0x2e8>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fc2d 	bl	80004d8 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f7ff feff 	bl	8000a88 <__aeabi_d2uiz>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a85      	ldr	r2, [pc, #532]	; (8000ea4 <main+0x33c>)
 8000c8e:	6013      	str	r3, [r2, #0]
		 speed_L += speed*0.35;
 8000c90:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <main+0x33c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fba5 	bl	80003e4 <__aeabi_ui2d>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	460d      	mov	r5, r1
 8000c9e:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <main+0x340>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fb9e 	bl	80003e4 <__aeabi_ui2d>
 8000ca8:	a36b      	add	r3, pc, #428	; (adr r3, 8000e58 <main+0x2f0>)
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	f7ff fc13 	bl	80004d8 <__aeabi_dmul>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	4629      	mov	r1, r5
 8000cba:	f7ff fa57 	bl	800016c <__adddf3>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff fedf 	bl	8000a88 <__aeabi_d2uiz>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a75      	ldr	r2, [pc, #468]	; (8000ea4 <main+0x33c>)
 8000cce:	6013      	str	r3, [r2, #0]
		 /*----------------  PID controller for Speed controller ---------------------------------------*/
		 Integral_speed_L+=speed_L;
 8000cd0:	4b74      	ldr	r3, [pc, #464]	; (8000ea4 <main+0x33c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb85 	bl	80003e4 <__aeabi_ui2d>
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <main+0x344>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fa44 	bl	800016c <__adddf3>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4970      	ldr	r1, [pc, #448]	; (8000eac <main+0x344>)
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
		 if(Integral_speed_L>20000)Integral_speed_L=20000;
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <main+0x344>)
 8000cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf4:	a35a      	add	r3, pc, #360	; (adr r3, 8000e60 <main+0x2f8>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fe7d 	bl	80009f8 <__aeabi_dcmpgt>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <main+0x1a8>
 8000d04:	4969      	ldr	r1, [pc, #420]	; (8000eac <main+0x344>)
 8000d06:	a356      	add	r3, pc, #344	; (adr r3, 8000e60 <main+0x2f8>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	e9c1 2300 	strd	r2, r3, [r1]
		 if(Integral_speed_L<-20000)Integral_speed_L=-20000;
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <main+0x344>)
 8000d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d16:	a354      	add	r3, pc, #336	; (adr r3, 8000e68 <main+0x300>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fe4e 	bl	80009bc <__aeabi_dcmplt>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <main+0x1ca>
 8000d26:	4961      	ldr	r1, [pc, #388]	; (8000eac <main+0x344>)
 8000d28:	a34f      	add	r3, pc, #316	; (adr r3, 8000e68 <main+0x300>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	e9c1 2300 	strd	r2, r3, [r1]
		 Pwm_L=Speed_KP_x*speed_L+Speed_KI_x*Integral_speed_L+Speed_KD_x*(speed_L-Last_speed_L);
 8000d32:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <main+0x33c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb54 	bl	80003e4 <__aeabi_ui2d>
 8000d3c:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <main+0x348>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fbc9 	bl	80004d8 <__aeabi_dmul>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4614      	mov	r4, r2
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <main+0x34c>)
 8000d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d54:	4b55      	ldr	r3, [pc, #340]	; (8000eac <main+0x344>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f7ff fbbd 	bl	80004d8 <__aeabi_dmul>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4620      	mov	r0, r4
 8000d64:	4629      	mov	r1, r5
 8000d66:	f7ff fa01 	bl	800016c <__adddf3>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4614      	mov	r4, r2
 8000d70:	461d      	mov	r5, r3
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <main+0x33c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb34 	bl	80003e4 <__aeabi_ui2d>
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <main+0x350>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f7ff f9f1 	bl	8000168 <__aeabi_dsub>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <main+0x354>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fba0 	bl	80004d8 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	4629      	mov	r1, r5
 8000da0:	f7ff f9e4 	bl	800016c <__adddf3>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4945      	ldr	r1, [pc, #276]	; (8000ec0 <main+0x358>)
 8000daa:	e9c1 2300 	strd	r2, r3, [r1]
		 Last_speed_L=speed_L;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <main+0x33c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb16 	bl	80003e4 <__aeabi_ui2d>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	493e      	ldr	r1, [pc, #248]	; (8000eb8 <main+0x350>)
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]

		 /*----------------  PID controller for balance ---------------------------------------*/

			 Bias=KalmanAngleX- 90.12;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <main+0x334>)
 8000dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc8:	a329      	add	r3, pc, #164	; (adr r3, 8000e70 <main+0x308>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff f9cb 	bl	8000168 <__aeabi_dsub>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	493b      	ldr	r1, [pc, #236]	; (8000ec4 <main+0x35c>)
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
			 Integral_bias+=Bias;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <main+0x360>)
 8000dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <main+0x35c>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff f9c0 	bl	800016c <__adddf3>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4935      	ldr	r1, [pc, #212]	; (8000ec8 <main+0x360>)
 8000df2:	e9c1 2300 	strd	r2, r3, [r1]
			 if(Integral_bias>30000)Integral_bias=30000;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <main+0x360>)
 8000df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dfc:	a31e      	add	r3, pc, #120	; (adr r3, 8000e78 <main+0x310>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fdf9 	bl	80009f8 <__aeabi_dcmpgt>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <main+0x2b0>
 8000e0c:	492e      	ldr	r1, [pc, #184]	; (8000ec8 <main+0x360>)
 8000e0e:	a31a      	add	r3, pc, #104	; (adr r3, 8000e78 <main+0x310>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	e9c1 2300 	strd	r2, r3, [r1]
			 if(Integral_bias<-30000)Integral_bias=-30000;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <main+0x360>)
 8000e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1e:	a318      	add	r3, pc, #96	; (adr r3, 8000e80 <main+0x318>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fdca 	bl	80009bc <__aeabi_dcmplt>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <main+0x2d2>
 8000e2e:	4926      	ldr	r1, [pc, #152]	; (8000ec8 <main+0x360>)
 8000e30:	a313      	add	r3, pc, #76	; (adr r3, 8000e80 <main+0x318>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	e9c1 2300 	strd	r2, r3, [r1]
		   D_Bias=Gx ;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <main+0x338>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	e044      	b.n	8000ecc <main+0x364>
 8000e42:	bf00      	nop
 8000e44:	f3af 8000 	nop.w
 8000e48:	1a9fbe77 	.word	0x1a9fbe77
 8000e4c:	405edd2f 	.word	0x405edd2f
 8000e50:	cccccccd 	.word	0xcccccccd
 8000e54:	3fe4cccc 	.word	0x3fe4cccc
 8000e58:	66666666 	.word	0x66666666
 8000e5c:	3fd66666 	.word	0x3fd66666
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40d38800 	.word	0x40d38800
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	c0d38800 	.word	0xc0d38800
 8000e70:	147ae148 	.word	0x147ae148
 8000e74:	405687ae 	.word	0x405687ae
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	40dd4c00 	.word	0x40dd4c00
 8000e80:	00000000 	.word	0x00000000
 8000e84:	c0dd4c00 	.word	0xc0dd4c00
 8000e88:	20000144 	.word	0x20000144
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	08006600 	.word	0x08006600
 8000e94:	08006608 	.word	0x08006608
 8000e98:	20000228 	.word	0x20000228
 8000e9c:	200002d8 	.word	0x200002d8
 8000ea0:	200002e0 	.word	0x200002e0
 8000ea4:	20000284 	.word	0x20000284
 8000ea8:	20000280 	.word	0x20000280
 8000eac:	200002a8 	.word	0x200002a8
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	200002b0 	.word	0x200002b0
 8000ebc:	20000290 	.word	0x20000290
 8000ec0:	200002a0 	.word	0x200002a0
 8000ec4:	200002b8 	.word	0x200002b8
 8000ec8:	200002c8 	.word	0x200002c8
 8000ecc:	492a      	ldr	r1, [pc, #168]	; (8000f78 <main+0x410>)
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]
			 balance=Balance_KP_x*Bias+Balance_KI_x*Integral_bias+D_Bias*Balance_KD_x;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <main+0x414>)
 8000ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <main+0x418>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fafb 	bl	80004d8 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4614      	mov	r4, r2
 8000ee8:	461d      	mov	r5, r3
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <main+0x41c>)
 8000eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <main+0x420>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff faef 	bl	80004d8 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4620      	mov	r0, r4
 8000f00:	4629      	mov	r1, r5
 8000f02:	f7ff f933 	bl	800016c <__adddf3>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <main+0x410>)
 8000f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <main+0x424>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fadd 	bl	80004d8 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4620      	mov	r0, r4
 8000f24:	4629      	mov	r1, r5
 8000f26:	f7ff f921 	bl	800016c <__adddf3>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fda9 	bl	8000a88 <__aeabi_d2uiz>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <main+0x428>)
 8000f3a:	6013      	str	r3, [r2, #0]

			 updatePWM_DutyCycle(Pwm_L+balance);
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <main+0x428>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa4f 	bl	80003e4 <__aeabi_ui2d>
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0x42c>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff f90e 	bl	800016c <__adddf3>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fd6e 	bl	8000a38 <__aeabi_d2iz>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb2c 	bl	80015bc <updatePWM_DutyCycle>

		  //MPU6050_Read_All(&hi2c1, &
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle the LED
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <main+0x430>)
 8000f6a:	f001 fe49 	bl	8002c00 <HAL_GPIO_TogglePin>

		HAL_Delay(1000); // Delay for 1 second
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f001 fba9 	bl	80026c8 <HAL_Delay>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f76:	e640      	b.n	8000bfa <main+0x92>
 8000f78:	200002c0 	.word	0x200002c0
 8000f7c:	20000018 	.word	0x20000018
 8000f80:	200002b8 	.word	0x200002b8
 8000f84:	20000298 	.word	0x20000298
 8000f88:	200002c8 	.word	0x200002c8
 8000f8c:	20000020 	.word	0x20000020
 8000f90:	200002d0 	.word	0x200002d0
 8000f94:	200002a0 	.word	0x200002a0
 8000f98:	40011000 	.word	0x40011000

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	2228      	movs	r2, #40	; 0x28
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fb48 	bl	8005640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8dc 	bl	8004190 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fde:	f000 fb21 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fb4a 	bl	8004694 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001006:	f000 fb0d 	bl	8001624 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001028:	2008      	movs	r0, #8
 800102a:	f7ff fd83 	bl	8000b34 <LL_APB2_GRP1_EnableClock>
	  /**I2C1 GPIO Configuration
	  PB6   ------> I2C1_SCL
	  PB7   ------> I2C1_SDA
	  */

	  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800102e:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8001032:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001034:	2309      	movs	r3, #9
 8001036:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800103c:	2304      	movs	r3, #4
 800103e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull       = LL_GPIO_PULL_UP;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_I2C1_Init+0x94>)
 800104a:	f004 fa58 	bl	80054fe <LL_GPIO_Init>
	  //LL_GPIO_AF_EnableRemap_I2C1();
	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800104e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001052:	f7ff fd57 	bl	8000b04 <LL_APB1_GRP1_EnableClock>


  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_I2C1_Init+0x98>)
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_I2C1_Init+0x9c>)
 800105a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_I2C1_Init+0x98>)
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_I2C1_Init+0xa0>)
 8001060:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_I2C1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_I2C1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2C1_Init+0x98>)
 8001070:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001074:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_I2C1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_I2C1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_I2C1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_I2C1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <MX_I2C1_Init+0x98>)
 8001090:	f001 fdd0 	bl	8002c34 <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x8a>
  {
    Error_Handler();
 800109a:	f000 fac3 	bl	8001624 <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	20000144 	.word	0x20000144
 80010b0:	40005400 	.word	0x40005400
 80010b4:	00061a80 	.word	0x00061a80

080010b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b092      	sub	sp, #72	; 0x48
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 faac 	bl	8005640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <MX_TIM1_Init+0x100>)
 80010ea:	4a34      	ldr	r2, [pc, #208]	; (80011bc <MX_TIM1_Init+0x104>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <MX_TIM1_Init+0x100>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <MX_TIM1_Init+0x100>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <MX_TIM1_Init+0x100>)
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001100:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <MX_TIM1_Init+0x100>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <MX_TIM1_Init+0x100>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <MX_TIM1_Init+0x100>)
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001114:	4828      	ldr	r0, [pc, #160]	; (80011b8 <MX_TIM1_Init+0x100>)
 8001116:	f003 fc41 	bl	800499c <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001120:	f000 fa80 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001130:	4619      	mov	r1, r3
 8001132:	4821      	ldr	r0, [pc, #132]	; (80011b8 <MX_TIM1_Init+0x100>)
 8001134:	f004 f882 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800113e:	f000 fa71 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_TIM1_Init+0x100>)
 8001168:	f003 fda6 	bl	8004cb8 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001172:	f000 fa57 	bl	8001624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM1_Init+0x100>)
 800119a:	f004 f8a7 	bl	80052ec <HAL_TIMEx_ConfigBreakDeadTime>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80011a4:	f000 fa3e 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <MX_TIM1_Init+0x100>)
 80011aa:	f001 f937 	bl	800241c <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3748      	adds	r7, #72	; 0x48
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000198 	.word	0x20000198
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fa36 	bl	8005640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001204:	2301      	movs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001230:	f003 fca0 	bl	8004b74 <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800123a:	f000 f9f3 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM2_Init+0xa4>)
 800124c:	f003 fff6 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001256:	f000 f9e5 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001e0 	.word	0x200001e0

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800127c:	2010      	movs	r0, #16
 800127e:	f7ff fc59 	bl	8000b34 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001282:	2020      	movs	r0, #32
 8001284:	f7ff fc56 	bl	8000b34 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff fc53 	bl	8000b34 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800128e:	2008      	movs	r0, #8
 8001290:	f7ff fc50 	bl	8000b34 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8001294:	4923      	ldr	r1, [pc, #140]	; (8001324 <MX_GPIO_Init+0xbc>)
 8001296:	4824      	ldr	r0, [pc, #144]	; (8001328 <MX_GPIO_Init+0xc0>)
 8001298:	f7ff fc16 	bl	8000ac8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SW_I2C_SCL_Pin|SW_I2C_SDA_Pin|LL_GPIO_PIN_8);
 800129c:	4923      	ldr	r1, [pc, #140]	; (800132c <MX_GPIO_Init+0xc4>)
 800129e:	4824      	ldr	r0, [pc, #144]	; (8001330 <MX_GPIO_Init+0xc8>)
 80012a0:	f7ff fc21 	bl	8000ae6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012a8:	2301      	movs	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012be:	f004 f91e 	bl	80054fe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_I2C_SCL_Pin;
 80012c2:	f240 1301 	movw	r3, #257	; 0x101
 80012c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80012d0:	2304      	movs	r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4815      	ldr	r0, [pc, #84]	; (8001330 <MX_GPIO_Init+0xc8>)
 80012da:	f004 f910 	bl	80054fe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_I2C_SDA_Pin;
 80012de:	f240 2302 	movw	r3, #514	; 0x202
 80012e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012e8:	2302      	movs	r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80012ec:	2304      	movs	r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SW_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_GPIO_Init+0xc8>)
 80012fa:	f004 f900 	bl	80054fe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_GPIO_Init+0xcc>)
 8001300:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001302:	2301      	movs	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_GPIO_Init+0xc8>)
 8001318:	f004 f8f1 	bl	80054fe <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	04200020 	.word	0x04200020
 8001328:	40011000 	.word	0x40011000
 800132c:	04010303 	.word	0x04010303
 8001330:	40010c00 	.word	0x40010c00
 8001334:	04010001 	.word	0x04010001

08001338 <dtostrf>:

/* USER CODE BEGIN 4 */

char *dtostrf(double val, signed char width, unsigned char prec, char *sout)
{
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b0b8      	sub	sp, #224	; 0xe0
 800133c:	af02      	add	r7, sp, #8
 800133e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	460b      	mov	r3, r1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	4613      	mov	r3, r2
 800134c:	71bb      	strb	r3, [r7, #6]
  sprintf(fmt, "%%%d.%df", width, prec);
  sprintf(sout, fmt, val);
  return sout;*/

  // Handle negative numbers
  uint8_t negative = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if (val < 0.0) {
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001360:	f7ff fb2c 	bl	80009bc <__aeabi_dcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <dtostrf+0x44>
    negative = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    val = -val;
 8001370:	68bc      	ldr	r4, [r7, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001378:	e9c7 4502 	strd	r4, r5, [r7, #8]
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <dtostrf+0x268>)
 8001382:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  for (int i = 0; i < prec; ++i) {
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800138c:	e00f      	b.n	80013ae <dtostrf+0x76>
    rounding /= 10.0;
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <dtostrf+0x26c>)
 8001394:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001398:	f7ff f9c8 	bl	800072c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  for (int i = 0; i < prec; ++i) {
 80013a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013a8:	3301      	adds	r3, #1
 80013aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbea      	blt.n	800138e <dtostrf+0x56>
  }

  val += rounding;
 80013b8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80013bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013c0:	f7fe fed4 	bl	800016c <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  // Extract the integer part of the number
  unsigned long int_part = (unsigned long)val;
 80013cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013d0:	f7ff fb5a 	bl	8000a88 <__aeabi_d2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  double remainder = val - (double)int_part;
 80013da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80013de:	f7ff f801 	bl	80003e4 <__aeabi_ui2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ea:	f7fe febd 	bl	8000168 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

  if (prec > 0) {
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d04f      	beq.n	800149c <dtostrf+0x164>
    // Extract digits from the remainder
    unsigned long dec_part = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    double decade = 1.0;
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <dtostrf+0x270>)
 8001408:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    for (int i = 0; i < prec; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001412:	e00f      	b.n	8001434 <dtostrf+0xfc>
      decade *= 10.0;
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <dtostrf+0x26c>)
 800141a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800141e:	f7ff f85b 	bl	80004d8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    for (int i = 0; i < prec; i++) {
 800142a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800142e:	3301      	adds	r3, #1
 8001430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800143a:	429a      	cmp	r2, r3
 800143c:	dbea      	blt.n	8001414 <dtostrf+0xdc>
    }
    remainder *= decade;
 800143e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001442:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001446:	f7ff f847 	bl	80004d8 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    dec_part = (int)remainder;
 8001452:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001456:	f7ff faef 	bl	8000a38 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    if (negative) {
 8001460:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <dtostrf+0x14a>
      sprintf(sout, "-%ld.%0*ld", int_part, prec, dec_part);
 8001468:	79ba      	ldrb	r2, [r7, #6]
 800146a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001476:	494d      	ldr	r1, [pc, #308]	; (80015ac <dtostrf+0x274>)
 8001478:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800147c:	f004 f9d4 	bl	8005828 <siprintf>
 8001480:	e01f      	b.n	80014c2 <dtostrf+0x18a>
    } else {
      sprintf(sout, "%ld.%0*ld", int_part, prec, dec_part);
 8001482:	79ba      	ldrb	r2, [r7, #6]
 8001484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001490:	4947      	ldr	r1, [pc, #284]	; (80015b0 <dtostrf+0x278>)
 8001492:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001496:	f004 f9c7 	bl	8005828 <siprintf>
 800149a:	e012      	b.n	80014c2 <dtostrf+0x18a>
    }
  } else {
    if (negative) {
 800149c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <dtostrf+0x17c>
      sprintf(sout, "-%ld", int_part);
 80014a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80014a8:	4942      	ldr	r1, [pc, #264]	; (80015b4 <dtostrf+0x27c>)
 80014aa:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80014ae:	f004 f9bb 	bl	8005828 <siprintf>
 80014b2:	e006      	b.n	80014c2 <dtostrf+0x18a>
    } else {
      sprintf(sout, "%ld", int_part);
 80014b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80014b8:	493f      	ldr	r1, [pc, #252]	; (80015b8 <dtostrf+0x280>)
 80014ba:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80014be:	f004 f9b3 	bl	8005828 <siprintf>
    }
  }
  // Handle minimum field width of the output string
  // width is signed value, negative for left adjustment.
  // Range -128,127
  char fmt[129] = "";
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	227d      	movs	r2, #125	; 0x7d
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 f8b6 	bl	8005640 <memset>
  unsigned int w = width;
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (width < 0) {
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da08      	bge.n	80014f6 <dtostrf+0x1be>
    negative = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    w = -width;
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	425b      	negs	r3, r3
 80014f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014f4:	e002      	b.n	80014fc <dtostrf+0x1c4>
  } else {
    negative = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  if (strlen(sout) < w) {
 80014fc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001500:	f7fe fe26 	bl	8000150 <strlen>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800150a:	4293      	cmp	r3, r2
 800150c:	d942      	bls.n	8001594 <dtostrf+0x25c>
    memset(fmt, ' ', 128);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	2120      	movs	r1, #32
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f892 	bl	8005640 <memset>
    fmt[w - strlen(sout)] = '\0';
 800151c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001520:	f7fe fe16 	bl	8000150 <strlen>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	33d8      	adds	r3, #216	; 0xd8
 800152e:	443b      	add	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	f803 2cc4 	strb.w	r2, [r3, #-196]
    if (negative == 0) {
 8001536:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800153a:	2b00      	cmp	r3, #0
 800153c:	d123      	bne.n	8001586 <dtostrf+0x24e>
      char *tmp = malloc(strlen(sout) + 1);
 800153e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001542:	f7fe fe05 	bl	8000150 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	3301      	adds	r3, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f004 f868 	bl	8005620 <malloc>
 8001550:	4603      	mov	r3, r0
 8001552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      strcpy(tmp, sout);
 8001556:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800155a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800155e:	f004 f992 	bl	8005886 <strcpy>
      strcpy(sout, fmt);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800156c:	f004 f98b 	bl	8005886 <strcpy>
      strcat(sout, tmp);
 8001570:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001574:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001578:	f004 f976 	bl	8005868 <strcat>
      free(tmp);
 800157c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001580:	f004 f856 	bl	8005630 <free>
 8001584:	e006      	b.n	8001594 <dtostrf+0x25c>
    } else {
      // left adjustment
      strcat(sout, fmt);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001590:	f004 f96a 	bl	8005868 <strcat>
    }
  }

  return sout;
 8001594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
}
 8001598:	4618      	mov	r0, r3
 800159a:	37d8      	adds	r7, #216	; 0xd8
 800159c:	46bd      	mov	sp, r7
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	3fe00000 	.word	0x3fe00000
 80015a4:	40240000 	.word	0x40240000
 80015a8:	3ff00000 	.word	0x3ff00000
 80015ac:	08006614 	.word	0x08006614
 80015b0:	08006620 	.word	0x08006620
 80015b4:	0800662c 	.word	0x0800662c
 80015b8:	08006634 	.word	0x08006634

080015bc <updatePWM_DutyCycle>:

void updatePWM_DutyCycle(int32_t pwm) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	uint32_t dutyCycle;
	if (pwm>0){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dd08      	ble.n	80015dc <updatePWM_DutyCycle+0x20>
		dutyCycle = pwm;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d4:	4811      	ldr	r0, [pc, #68]	; (800161c <updatePWM_DutyCycle+0x60>)
 80015d6:	f001 fafb 	bl	8002bd0 <HAL_GPIO_WritePin>
 80015da:	e008      	b.n	80015ee <updatePWM_DutyCycle+0x32>
	}
	else{
		dutyCycle = -pwm;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	425b      	negs	r3, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <updatePWM_DutyCycle+0x60>)
 80015ea:	f001 faf1 	bl	8002bd0 <HAL_GPIO_WritePin>

	}
  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = dutyCycle; // Update the duty cycle value here
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH; // Change polarity if needed
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]

  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1); // Change to your timer and channel
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <updatePWM_DutyCycle+0x64>)
 8001608:	f003 fb56 	bl	8004cb8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Change to your timer and channel
 800160c:	2100      	movs	r1, #0
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <updatePWM_DutyCycle+0x64>)
 8001610:	f003 fa14 	bl	8004a3c <HAL_TIM_PWM_Start>


}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010c00 	.word	0x40010c00
 8001620:	200001e0 	.word	0x200001e0

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>

0800162e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b088      	sub	sp, #32
 8001632:	af04      	add	r7, sp, #16
 8001634:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	2301      	movs	r3, #1
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	f107 030f 	add.w	r3, r7, #15
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	2275      	movs	r2, #117	; 0x75
 8001648:	21d0      	movs	r1, #208	; 0xd0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f001 fe2e 	bl	80032ac <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b68      	cmp	r3, #104	; 0x68
 8001654:	d13d      	bne.n	80016d2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800165a:	2364      	movs	r3, #100	; 0x64
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2301      	movs	r3, #1
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f107 030e 	add.w	r3, r7, #14
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	226b      	movs	r2, #107	; 0x6b
 800166c:	21d0      	movs	r1, #208	; 0xd0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f001 fd22 	bl	80030b8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001674:	2307      	movs	r3, #7
 8001676:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	2301      	movs	r3, #1
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	f107 030e 	add.w	r3, r7, #14
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2219      	movs	r2, #25
 800168a:	21d0      	movs	r1, #208	; 0xd0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 fd13 	bl	80030b8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2301      	movs	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	f107 030e 	add.w	r3, r7, #14
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	221c      	movs	r2, #28
 80016a8:	21d0      	movs	r1, #208	; 0xd0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f001 fd04 	bl	80030b8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80016b4:	2364      	movs	r3, #100	; 0x64
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030e 	add.w	r3, r7, #14
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	221b      	movs	r2, #27
 80016c6:	21d0      	movs	r1, #208	; 0xd0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fcf5 	bl	80030b8 <HAL_I2C_Mem_Write>
        return 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <MPU6050_Init+0xa6>
    }
    return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <MPU6050_Read_All>:
    /// floating
    //DataStruct->Temperature = (double)((int16_t)temp / (double)340.0 + (double)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80016e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e4:	b094      	sub	sp, #80	; 0x50
 80016e6:	af04      	add	r7, sp, #16
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	230e      	movs	r3, #14
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	223b      	movs	r2, #59	; 0x3b
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 fdd3 	bl	80032ac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001706:	7a3b      	ldrb	r3, [r7, #8]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001718:	7abb      	ldrb	r3, [r7, #10]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800172a:	7b3b      	ldrb	r3, [r7, #12]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7b7b      	ldrb	r3, [r7, #13]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800174a:	7c3b      	ldrb	r3, [r7, #16]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b21a      	sxth	r2, r3
 8001750:	7c7b      	ldrb	r3, [r7, #17]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21a      	sxth	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800175c:	7cbb      	ldrb	r3, [r7, #18]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21a      	sxth	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800176e:	7d3b      	ldrb	r3, [r7, #20]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7d7b      	ldrb	r3, [r7, #21]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe3c 	bl	8000404 <__aeabi_i2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4bad      	ldr	r3, [pc, #692]	; (8001a48 <MPU6050_Read_All+0x368>)
 8001792:	f7fe ffcb 	bl	800072c <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe2c 	bl	8000404 <__aeabi_i2d>
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4ba5      	ldr	r3, [pc, #660]	; (8001a48 <MPU6050_Read_All+0x368>)
 80017b2:	f7fe ffbb 	bl	800072c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe1c 	bl	8000404 <__aeabi_i2d>
 80017cc:	a398      	add	r3, pc, #608	; (adr r3, 8001a30 <MPU6050_Read_All+0x350>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ffab 	bl	800072c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /// floating
    //DataStruct->Temperature = (double)((int16_t)temp / (double)340.0 + (double)36.53);
    //DataStruct->Temperature = (double)((int16_t)temp / (double)340.0 + (double)36.53);
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe0c 	bl	8000404 <__aeabi_i2d>
 80017ec:	a392      	add	r3, pc, #584	; (adr r3, 8001a38 <MPU6050_Read_All+0x358>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ff9b 	bl	800072c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fdfc 	bl	8000404 <__aeabi_i2d>
 800180c:	a38a      	add	r3, pc, #552	; (adr r3, 8001a38 <MPU6050_Read_All+0x358>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe ff8b 	bl	800072c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fdec 	bl	8000404 <__aeabi_i2d>
 800182c:	a382      	add	r3, pc, #520	; (adr r3, 8001a38 <MPU6050_Read_All+0x358>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe ff7b 	bl	800072c <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001840:	f000 ff38 	bl	80026b4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <MPU6050_Read_All+0x36c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdc9 	bl	80003e4 <__aeabi_ui2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <MPU6050_Read_All+0x370>)
 8001858:	f7fe ff68 	bl	800072c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001864:	f000 ff26 	bl	80026b4 <HAL_GetTick>
 8001868:	4603      	mov	r3, r0
 800186a:	4a78      	ldr	r2, [pc, #480]	; (8001a4c <MPU6050_Read_All+0x36c>)
 800186c:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	461a      	mov	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	fb03 f202 	mul.w	r2, r3, r2
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001886:	4619      	mov	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fdb5 	bl	8000404 <__aeabi_i2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f004 fcf8 	bl	8006296 <sqrt>
 80018a6:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018b6:	f7ff f877 	bl	80009a8 <__aeabi_dcmpeq>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d119      	bne.n	80018f4 <MPU6050_Read_All+0x214>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd9c 	bl	8000404 <__aeabi_i2d>
 80018cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d0:	f7fe ff2c 	bl	800072c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f004 fb4c 	bl	8005f78 <atan>
 80018e0:	a357      	add	r3, pc, #348	; (adr r3, 8001a40 <MPU6050_Read_All+0x360>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fdf7 	bl	80004d8 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80018f2:	e005      	b.n	8001900 <MPU6050_Read_All+0x220>
    }
    else
    {
        roll = 0.0;
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	425b      	negs	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd7b 	bl	8000404 <__aeabi_i2d>
 800190e:	4682      	mov	sl, r0
 8001910:	468b      	mov	fp, r1
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd73 	bl	8000404 <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4650      	mov	r0, sl
 8001924:	4659      	mov	r1, fp
 8001926:	f004 fcb4 	bl	8006292 <atan2>
 800192a:	a345      	add	r3, pc, #276	; (adr r3, 8001a40 <MPU6050_Read_All+0x360>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fdd2 	bl	80004d8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <MPU6050_Read_All+0x374>)
 8001942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001946:	f7ff f839 	bl	80009bc <__aeabi_dcmplt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00a      	beq.n	8001966 <MPU6050_Read_All+0x286>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <MPU6050_Read_All+0x378>)
 800195c:	f7ff f84c 	bl	80009f8 <__aeabi_dcmpgt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d114      	bne.n	8001990 <MPU6050_Read_All+0x2b0>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <MPU6050_Read_All+0x378>)
 800196c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001970:	f7ff f842 	bl	80009f8 <__aeabi_dcmpgt>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d015      	beq.n	80019a6 <MPU6050_Read_All+0x2c6>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <MPU6050_Read_All+0x374>)
 8001986:	f7ff f819 	bl	80009bc <__aeabi_dcmplt>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <MPU6050_Read_All+0x2c6>
    {
        KalmanY.angle = pitch;
 8001990:	4932      	ldr	r1, [pc, #200]	; (8001a5c <MPU6050_Read_All+0x37c>)
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80019a4:	e012      	b.n	80019cc <MPU6050_Read_All+0x2ec>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019b4:	e9cd 2300 	strd	r2, r3, [sp]
 80019b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019bc:	4827      	ldr	r0, [pc, #156]	; (8001a5c <MPU6050_Read_All+0x37c>)
 80019be:	f000 f851 	bl	8001a64 <Kalman_getAngle>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80019d2:	4690      	mov	r8, r2
 80019d4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MPU6050_Read_All+0x378>)
 80019de:	4640      	mov	r0, r8
 80019e0:	4649      	mov	r1, r9
 80019e2:	f7ff f809 	bl	80009f8 <__aeabi_dcmpgt>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <MPU6050_Read_All+0x31e>
        DataStruct->Gx = -DataStruct->Gx;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019f2:	4614      	mov	r4, r2
 80019f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MPU6050_Read_All+0x380>)
 8001a16:	f000 f825 	bl	8001a64 <Kalman_getAngle>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001a24:	bf00      	nop
 8001a26:	3740      	adds	r7, #64	; 0x40
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40cc2900 	.word	0x40cc2900
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	40606000 	.word	0x40606000
 8001a40:	1a63c1f8 	.word	0x1a63c1f8
 8001a44:	404ca5dc 	.word	0x404ca5dc
 8001a48:	40d00000 	.word	0x40d00000
 8001a4c:	200002e8 	.word	0x200002e8
 8001a50:	408f4000 	.word	0x408f4000
 8001a54:	c0568000 	.word	0xc0568000
 8001a58:	40568000 	.word	0x40568000
 8001a5c:	20000070 	.word	0x20000070
 8001a60:	20000028 	.word	0x20000028

08001a64 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b092      	sub	sp, #72	; 0x48
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a7a:	f7fe fb75 	bl	8000168 <__aeabi_dsub>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a94:	f7fe fd20 	bl	80004d8 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe fb64 	bl	800016c <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001abe:	f7fe fd0b 	bl	80004d8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ad0:	f7fe fb4a 	bl	8000168 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ae2:	f7fe fb41 	bl	8000168 <__aeabi_dsub>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fb3a 	bl	800016c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b04:	f7fe fce8 	bl	80004d8 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fb2c 	bl	800016c <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b2a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b2e:	f7fe fcd3 	bl	80004d8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fb15 	bl	8000168 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	68f9      	ldr	r1, [r7, #12]
 8001b44:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b54:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b58:	f7fe fcbe 	bl	80004d8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fb00 	bl	8000168 <__aeabi_dsub>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b7e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b82:	f7fe fca9 	bl	80004d8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe faed 	bl	800016c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ba8:	f7fe fae0 	bl	800016c <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001bba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bbe:	f7fe fdb5 	bl	800072c <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bd4:	f7fe fdaa 	bl	800072c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bea:	f7fe fabd 	bl	8000168 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001bfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c04:	f7fe fc68 	bl	80004d8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe faac 	bl	800016c <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001c24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c2c:	f7fe fc54 	bl	80004d8 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4620      	mov	r0, r4
 8001c36:	4629      	mov	r1, r5
 8001c38:	f7fe fa98 	bl	800016c <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c56:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c68:	f7fe fc36 	bl	80004d8 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fa78 	bl	8000168 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c90:	f7fe fc22 	bl	80004d8 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fa64 	bl	8000168 <__aeabi_dsub>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cb8:	f7fe fc0e 	bl	80004d8 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fa50 	bl	8000168 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001cd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce0:	f7fe fbfa 	bl	80004d8 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4629      	mov	r1, r5
 8001cec:	f7fe fa3c 	bl	8000168 <__aeabi_dsub>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	3748      	adds	r7, #72	; 0x48
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d0c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001d12:	f000 fa1f 	bl	8002154 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2178      	movs	r1, #120	; 0x78
 8001d1e:	485b      	ldr	r0, [pc, #364]	; (8001e8c <SSD1306_Init+0x180>)
 8001d20:	f001 fd2c 	bl	800377c <HAL_I2C_IsDeviceReady>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e0a9      	b.n	8001e82 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001d2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d32:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d34:	e002      	b.n	8001d3c <SSD1306_Init+0x30>
		p--;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001d42:	22ae      	movs	r2, #174	; 0xae
 8001d44:	2100      	movs	r1, #0
 8001d46:	2078      	movs	r0, #120	; 0x78
 8001d48:	f000 fa7e 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2078      	movs	r0, #120	; 0x78
 8001d52:	f000 fa79 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d56:	2210      	movs	r2, #16
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2078      	movs	r0, #120	; 0x78
 8001d5c:	f000 fa74 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d60:	22b0      	movs	r2, #176	; 0xb0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2078      	movs	r0, #120	; 0x78
 8001d66:	f000 fa6f 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001d6a:	22c8      	movs	r2, #200	; 0xc8
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2078      	movs	r0, #120	; 0x78
 8001d70:	f000 fa6a 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2078      	movs	r0, #120	; 0x78
 8001d7a:	f000 fa65 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d7e:	2210      	movs	r2, #16
 8001d80:	2100      	movs	r1, #0
 8001d82:	2078      	movs	r0, #120	; 0x78
 8001d84:	f000 fa60 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d88:	2240      	movs	r2, #64	; 0x40
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2078      	movs	r0, #120	; 0x78
 8001d8e:	f000 fa5b 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d92:	2281      	movs	r2, #129	; 0x81
 8001d94:	2100      	movs	r1, #0
 8001d96:	2078      	movs	r0, #120	; 0x78
 8001d98:	f000 fa56 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2078      	movs	r0, #120	; 0x78
 8001da2:	f000 fa51 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001da6:	22a1      	movs	r2, #161	; 0xa1
 8001da8:	2100      	movs	r1, #0
 8001daa:	2078      	movs	r0, #120	; 0x78
 8001dac:	f000 fa4c 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001db0:	22a6      	movs	r2, #166	; 0xa6
 8001db2:	2100      	movs	r1, #0
 8001db4:	2078      	movs	r0, #120	; 0x78
 8001db6:	f000 fa47 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001dba:	22a8      	movs	r2, #168	; 0xa8
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f000 fa42 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001dc4:	223f      	movs	r2, #63	; 0x3f
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2078      	movs	r0, #120	; 0x78
 8001dca:	f000 fa3d 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dce:	22a4      	movs	r2, #164	; 0xa4
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2078      	movs	r0, #120	; 0x78
 8001dd4:	f000 fa38 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001dd8:	22d3      	movs	r2, #211	; 0xd3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2078      	movs	r0, #120	; 0x78
 8001dde:	f000 fa33 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2078      	movs	r0, #120	; 0x78
 8001de8:	f000 fa2e 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dec:	22d5      	movs	r2, #213	; 0xd5
 8001dee:	2100      	movs	r1, #0
 8001df0:	2078      	movs	r0, #120	; 0x78
 8001df2:	f000 fa29 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001df6:	22f0      	movs	r2, #240	; 0xf0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2078      	movs	r0, #120	; 0x78
 8001dfc:	f000 fa24 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001e00:	22d9      	movs	r2, #217	; 0xd9
 8001e02:	2100      	movs	r1, #0
 8001e04:	2078      	movs	r0, #120	; 0x78
 8001e06:	f000 fa1f 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001e0a:	2222      	movs	r2, #34	; 0x22
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2078      	movs	r0, #120	; 0x78
 8001e10:	f000 fa1a 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e14:	22da      	movs	r2, #218	; 0xda
 8001e16:	2100      	movs	r1, #0
 8001e18:	2078      	movs	r0, #120	; 0x78
 8001e1a:	f000 fa15 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e1e:	2212      	movs	r2, #18
 8001e20:	2100      	movs	r1, #0
 8001e22:	2078      	movs	r0, #120	; 0x78
 8001e24:	f000 fa10 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e28:	22db      	movs	r2, #219	; 0xdb
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2078      	movs	r0, #120	; 0x78
 8001e2e:	f000 fa0b 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e32:	2220      	movs	r2, #32
 8001e34:	2100      	movs	r1, #0
 8001e36:	2078      	movs	r0, #120	; 0x78
 8001e38:	f000 fa06 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001e3c:	228d      	movs	r2, #141	; 0x8d
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2078      	movs	r0, #120	; 0x78
 8001e42:	f000 fa01 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e46:	2214      	movs	r2, #20
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2078      	movs	r0, #120	; 0x78
 8001e4c:	f000 f9fc 	bl	8002248 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e50:	22af      	movs	r2, #175	; 0xaf
 8001e52:	2100      	movs	r1, #0
 8001e54:	2078      	movs	r0, #120	; 0x78
 8001e56:	f000 f9f7 	bl	8002248 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e5a:	222e      	movs	r2, #46	; 0x2e
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2078      	movs	r0, #120	; 0x78
 8001e60:	f000 f9f2 	bl	8002248 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 f843 	bl	8001ef0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001e6a:	f000 f813 	bl	8001e94 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <SSD1306_Init+0x184>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <SSD1306_Init+0x184>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SSD1306_Init+0x184>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000144 	.word	0x20000144
 8001e90:	200006ec 	.word	0x200006ec

08001e94 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	e01d      	b.n	8001edc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	3b50      	subs	r3, #80	; 0x50
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	; 0x78
 8001eac:	f000 f9cc 	bl	8002248 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2078      	movs	r0, #120	; 0x78
 8001eb6:	f000 f9c7 	bl	8002248 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001eba:	2210      	movs	r2, #16
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2078      	movs	r0, #120	; 0x78
 8001ec0:	f000 f9c2 	bl	8002248 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	01db      	lsls	r3, r3, #7
 8001ec8:	4a08      	ldr	r2, [pc, #32]	; (8001eec <SSD1306_UpdateScreen+0x58>)
 8001eca:	441a      	add	r2, r3
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	2078      	movs	r0, #120	; 0x78
 8001ed2:	f000 f953 	bl	800217c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b07      	cmp	r3, #7
 8001ee0:	d9de      	bls.n	8001ea0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200002ec 	.word	0x200002ec

08001ef0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <SSD1306_Fill+0x14>
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <SSD1306_Fill+0x16>
 8001f04:	23ff      	movs	r3, #255	; 0xff
 8001f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <SSD1306_Fill+0x2c>)
 8001f0e:	f003 fb97 	bl	8005640 <memset>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002ec 	.word	0x200002ec

08001f20 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	80bb      	strh	r3, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	70fb      	strb	r3, [r7, #3]
	if (
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b7f      	cmp	r3, #127	; 0x7f
 8001f36:	d848      	bhi.n	8001fca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001f3c:	d845      	bhi.n	8001fca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <SSD1306_DrawPixel+0xb4>)
 8001f40:	791b      	ldrb	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d11a      	bne.n	8001f90 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	b298      	uxth	r0, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	01db      	lsls	r3, r3, #7
 8001f66:	4413      	add	r3, r2
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <SSD1306_DrawPixel+0xb8>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	88bb      	ldrh	r3, [r7, #4]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b259      	sxtb	r1, r3
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	4603      	mov	r3, r0
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4413      	add	r3, r2
 8001f88:	b2c9      	uxtb	r1, r1
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <SSD1306_DrawPixel+0xb8>)
 8001f8c:	54d1      	strb	r1, [r2, r3]
 8001f8e:	e01d      	b.n	8001fcc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f90:	88fa      	ldrh	r2, [r7, #6]
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	b298      	uxth	r0, r3
 8001f98:	4603      	mov	r3, r0
 8001f9a:	01db      	lsls	r3, r3, #7
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <SSD1306_DrawPixel+0xb8>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b259      	sxtb	r1, r3
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <SSD1306_DrawPixel+0xb8>)
 8001fc6:	54d1      	strb	r1, [r2, r3]
 8001fc8:	e000      	b.n	8001fcc <SSD1306_DrawPixel+0xac>
		return;
 8001fca:	bf00      	nop
	}
}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	200006ec 	.word	0x200006ec
 8001fd8:	200002ec 	.word	0x200002ec

08001fdc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	80fb      	strh	r3, [r7, #6]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <SSD1306_GotoXY+0x28>)
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <SSD1306_GotoXY+0x28>)
 8001ff4:	88bb      	ldrh	r3, [r7, #4]
 8001ff6:	8053      	strh	r3, [r2, #2]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200006ec 	.word	0x200006ec

08002008 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <SSD1306_Putc+0xfc>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
	if (
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	dc07      	bgt.n	8002038 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <SSD1306_Putc+0xfc>)
 800202a:	885b      	ldrh	r3, [r3, #2]
 800202c:	461a      	mov	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002034:	2b3f      	cmp	r3, #63	; 0x3f
 8002036:	dd01      	ble.n	800203c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002038:	2300      	movs	r3, #0
 800203a:	e05e      	b.n	80020fa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e04b      	b.n	80020da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	3b20      	subs	r3, #32
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	7849      	ldrb	r1, [r1, #1]
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4619      	mov	r1, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	440b      	add	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e030      	b.n	80020c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <SSD1306_Putc+0xfc>)
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b298      	uxth	r0, r3
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <SSD1306_Putc+0xfc>)
 8002084:	885a      	ldrh	r2, [r3, #2]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4413      	add	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	79ba      	ldrb	r2, [r7, #6]
 8002090:	4619      	mov	r1, r3
 8002092:	f7ff ff45 	bl	8001f20 <SSD1306_DrawPixel>
 8002096:	e014      	b.n	80020c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <SSD1306_Putc+0xfc>)
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	b298      	uxth	r0, r3
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <SSD1306_Putc+0xfc>)
 80020a6:	885a      	ldrh	r2, [r3, #2]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	b299      	uxth	r1, r3
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	f7ff ff2f 	bl	8001f20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	3301      	adds	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d3c8      	bcc.n	8002066 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	785b      	ldrb	r3, [r3, #1]
 80020de:	461a      	mov	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d3ad      	bcc.n	8002042 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <SSD1306_Putc+0xfc>)
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <SSD1306_Putc+0xfc>)
 80020f6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200006ec 	.word	0x200006ec

08002108 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002116:	e012      	b.n	800213e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff71 	bl	8002008 <SSD1306_Putc>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d002      	beq.n	8002138 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	e008      	b.n	800214a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e8      	bne.n	8002118 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <ssd1306_I2C_Init+0x24>)
 800215c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800215e:	e002      	b.n	8002166 <ssd1306_I2C_Init+0x12>
		p--;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	0003d090 	.word	0x0003d090

0800217c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b0c7      	sub	sp, #284	; 0x11c
 8002180:	af02      	add	r7, sp, #8
 8002182:	4604      	mov	r4, r0
 8002184:	4608      	mov	r0, r1
 8002186:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800218a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800218e:	600a      	str	r2, [r1, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002196:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800219a:	4622      	mov	r2, r4
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021a2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80021a6:	4602      	mov	r2, r0
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b2:	460a      	mov	r2, r1
 80021b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80021b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021c2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021d0:	e015      	b.n	80021fe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80021d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	441a      	add	r2, r3
 80021e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021e6:	3301      	adds	r3, #1
 80021e8:	7811      	ldrb	r1, [r2, #0]
 80021ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021ee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80021f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80021f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021f8:	3301      	adds	r3, #1
 80021fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002202:	b29b      	uxth	r3, r3
 8002204:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002208:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d8df      	bhi.n	80021d2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002216:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b299      	uxth	r1, r3
 800221e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	f107 020c 	add.w	r2, r7, #12
 8002230:	200a      	movs	r0, #10
 8002232:	9000      	str	r0, [sp, #0]
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <ssd1306_I2C_WriteMulti+0xc8>)
 8002236:	f000 fe41 	bl	8002ebc <HAL_I2C_Master_Transmit>
}
 800223a:	bf00      	nop
 800223c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002240:	46bd      	mov	sp, r7
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	20000144 	.word	0x20000144

08002248 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
 8002252:	460b      	mov	r3, r1
 8002254:	71bb      	strb	r3, [r7, #6]
 8002256:	4613      	mov	r3, r2
 8002258:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800225e:	797b      	ldrb	r3, [r7, #5]
 8002260:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	b299      	uxth	r1, r3
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	230a      	movs	r3, #10
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2302      	movs	r3, #2
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <ssd1306_I2C_Write+0x38>)
 8002272:	f000 fe23 	bl	8002ebc <HAL_I2C_Master_Transmit>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000144 	.word	0x20000144

08002284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_MspInit+0x5c>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_MspInit+0x5c>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6193      	str	r3, [r2, #24]
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_MspInit+0x5c>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_MspInit+0x5c>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_MspInit+0x5c>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_MspInit+0x5c>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_MspInit+0x60>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_MspInit+0x60>)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000

080022e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_I2C_MspInit+0x74>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d125      	bne.n	8002354 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_I2C_MspInit+0x78>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_I2C_MspInit+0x78>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_I2C_MspInit+0x78>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002324:	2312      	movs	r3, #18
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4619      	mov	r1, r3
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <HAL_I2C_MspInit+0x7c>)
 8002338:	f000 face 	bl	80028d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0x78>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_I2C_MspInit+0x78>)
 8002342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002346:	61d3      	str	r3, [r2, #28]
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_I2C_MspInit+0x78>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40005400 	.word	0x40005400
 8002360:	40021000 	.word	0x40021000
 8002364:	40010c00 	.word	0x40010c00

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_TIM_PWM_MspInit+0x34>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10b      	bne.n	8002392 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_TIM_PWM_MspInit+0x38>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_TIM_PWM_MspInit+0x38>)
 8002380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002384:	6193      	str	r3, [r2, #24]
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_TIM_PWM_MspInit+0x38>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d123      	bne.n	800240c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	61d3      	str	r3, [r2, #28]
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_TIM_Encoder_MspInit+0x70>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023f4:	2303      	movs	r3, #3
 80023f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4619      	mov	r1, r3
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <HAL_TIM_Encoder_MspInit+0x74>)
 8002408:	f000 fa66 	bl	80028d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40010800 	.word	0x40010800

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_TIM_MspPostInit+0x7c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d129      	bne.n	8002490 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_TIM_MspPostInit+0x80>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_TIM_MspPostInit+0x80>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_TIM_MspPostInit+0x80>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4619      	mov	r1, r3
 8002466:	480e      	ldr	r0, [pc, #56]	; (80024a0 <HAL_TIM_MspPostInit+0x84>)
 8002468:	f000 fa36 	bl	80028d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_TIM_MspPostInit+0x88>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_TIM_MspPostInit+0x88>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010000 	.word	0x40010000

080024a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <NMI_Handler+0x4>

080024ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <MemManage_Handler+0x4>

080024ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <SysTick_Handler+0x44>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <SysTick_Handler+0x44>)
 80024f8:	6013      	str	r3, [r2, #0]
	if (indx == 500)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <SysTick_Handler+0x44>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002502:	d110      	bne.n	8002526 <SysTick_Handler+0x3a>
	{
		speed = ((position - oldpos)*2);  // speed in clicks/sec
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <SysTick_Handler+0x48>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <SysTick_Handler+0x4c>)
 800250a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Handler+0x50>)
 8002514:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <SysTick_Handler+0x48>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SysTick_Handler+0x4c>)
 800251e:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <SysTick_Handler+0x44>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002526:	f000 f8b3 	bl	8002690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200006f4 	.word	0x200006f4
 8002534:	20000288 	.word	0x20000288
 8002538:	200006f2 	.word	0x200006f2
 800253c:	20000280 	.word	0x20000280

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f003 f82c 	bl	80055cc <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20002800 	.word	0x20002800
 80025a0:	00000400 	.word	0x00000400
 80025a4:	200006f8 	.word	0x200006f8
 80025a8:	20000710 	.word	0x20000710

080025ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ba:	490d      	ldr	r1, [pc, #52]	; (80025f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c0:	e002      	b.n	80025c8 <LoopCopyDataInit>

080025c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c6:	3304      	adds	r3, #4

080025c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025cc:	d3f9      	bcc.n	80025c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d0:	4c0a      	ldr	r4, [pc, #40]	; (80025fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d4:	e001      	b.n	80025da <LoopFillZerobss>

080025d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d8:	3204      	adds	r2, #4

080025da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025dc:	d3fb      	bcc.n	80025d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025de:	f7ff ffe5 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025e2:	f002 fff9 	bl	80055d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e6:	f7fe fabf 	bl	8000b68 <main>
  bx lr
 80025ea:	4770      	bx	lr
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f0:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80025f4:	08007468 	.word	0x08007468
  ldr r2, =_sbss
 80025f8:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80025fc:	20000710 	.word	0x20000710

08002600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC1_2_IRQHandler>
	...

08002604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_Init+0x28>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x28>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002614:	2003      	movs	r0, #3
 8002616:	f000 f92b 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261a:	200f      	movs	r0, #15
 800261c:	f000 f808 	bl	8002630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002620:	f7ff fe30 	bl	8002284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x54>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x58>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002646:	fbb3 f3f1 	udiv	r3, r3, r1
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f935 	bl	80028be <HAL_SYSTICK_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e00e      	b.n	800267c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d80a      	bhi.n	800267a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f000 f90b 	bl	8002886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <HAL_InitTick+0x5c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200000b8 	.word	0x200000b8
 8002688:	200000c0 	.word	0x200000c0
 800268c:	200000bc 	.word	0x200000bc

08002690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x1c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_IncTick+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_IncTick+0x20>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	200000c0 	.word	0x200000c0
 80026b0:	200006fc 	.word	0x200006fc

080026b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_GetTick+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	200006fc 	.word	0x200006fc

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffe0 	bl	80026b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200000c0 	.word	0x200000c0

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db0a      	blt.n	800279e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	490c      	ldr	r1, [pc, #48]	; (80027c0 <__NVIC_SetPriority+0x4c>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800279c:	e00a      	b.n	80027b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4908      	ldr	r1, [pc, #32]	; (80027c4 <__NVIC_SetPriority+0x50>)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3b04      	subs	r3, #4
 80027ac:	0112      	lsls	r2, r2, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	440b      	add	r3, r1
 80027b2:	761a      	strb	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	bf28      	it	cs
 80027e6:	2304      	movcs	r3, #4
 80027e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d902      	bls.n	80027f8 <NVIC_EncodePriority+0x30>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b03      	subs	r3, #3
 80027f6:	e000      	b.n	80027fa <NVIC_EncodePriority+0x32>
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43d9      	mvns	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	4313      	orrs	r3, r2
         );
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff90 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff49 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff5e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff90 	bl	80027c8 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5f 	bl	8002774 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffb0 	bl	800282c <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b08b      	sub	sp, #44	; 0x2c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ea:	e161      	b.n	8002bb0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028ec:	2201      	movs	r2, #1
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 8150 	bne.w	8002baa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a97      	ldr	r2, [pc, #604]	; (8002b6c <HAL_GPIO_Init+0x294>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d05e      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002914:	4a95      	ldr	r2, [pc, #596]	; (8002b6c <HAL_GPIO_Init+0x294>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d875      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800291a:	4a95      	ldr	r2, [pc, #596]	; (8002b70 <HAL_GPIO_Init+0x298>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d058      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002920:	4a93      	ldr	r2, [pc, #588]	; (8002b70 <HAL_GPIO_Init+0x298>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d86f      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002926:	4a93      	ldr	r2, [pc, #588]	; (8002b74 <HAL_GPIO_Init+0x29c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d052      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 800292c:	4a91      	ldr	r2, [pc, #580]	; (8002b74 <HAL_GPIO_Init+0x29c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d869      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002932:	4a91      	ldr	r2, [pc, #580]	; (8002b78 <HAL_GPIO_Init+0x2a0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04c      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002938:	4a8f      	ldr	r2, [pc, #572]	; (8002b78 <HAL_GPIO_Init+0x2a0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d863      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800293e:	4a8f      	ldr	r2, [pc, #572]	; (8002b7c <HAL_GPIO_Init+0x2a4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d046      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002944:	4a8d      	ldr	r2, [pc, #564]	; (8002b7c <HAL_GPIO_Init+0x2a4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d85d      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800294a:	2b12      	cmp	r3, #18
 800294c:	d82a      	bhi.n	80029a4 <HAL_GPIO_Init+0xcc>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d859      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HAL_GPIO_Init+0x80>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	080029d3 	.word	0x080029d3
 800295c:	080029ad 	.word	0x080029ad
 8002960:	080029bf 	.word	0x080029bf
 8002964:	08002a01 	.word	0x08002a01
 8002968:	08002a07 	.word	0x08002a07
 800296c:	08002a07 	.word	0x08002a07
 8002970:	08002a07 	.word	0x08002a07
 8002974:	08002a07 	.word	0x08002a07
 8002978:	08002a07 	.word	0x08002a07
 800297c:	08002a07 	.word	0x08002a07
 8002980:	08002a07 	.word	0x08002a07
 8002984:	08002a07 	.word	0x08002a07
 8002988:	08002a07 	.word	0x08002a07
 800298c:	08002a07 	.word	0x08002a07
 8002990:	08002a07 	.word	0x08002a07
 8002994:	08002a07 	.word	0x08002a07
 8002998:	08002a07 	.word	0x08002a07
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	080029c9 	.word	0x080029c9
 80029a4:	4a76      	ldr	r2, [pc, #472]	; (8002b80 <HAL_GPIO_Init+0x2a8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029aa:	e02c      	b.n	8002a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e029      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	3304      	adds	r3, #4
 80029ba:	623b      	str	r3, [r7, #32]
          break;
 80029bc:	e024      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	3308      	adds	r3, #8
 80029c4:	623b      	str	r3, [r7, #32]
          break;
 80029c6:	e01f      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	330c      	adds	r3, #12
 80029ce:	623b      	str	r3, [r7, #32]
          break;
 80029d0:	e01a      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029da:	2304      	movs	r3, #4
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e013      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029e8:	2308      	movs	r3, #8
 80029ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	611a      	str	r2, [r3, #16]
          break;
 80029f2:	e009      	b.n	8002a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f4:	2308      	movs	r3, #8
 80029f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	615a      	str	r2, [r3, #20]
          break;
 80029fe:	e003      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
          break;
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          break;
 8002a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2bff      	cmp	r3, #255	; 0xff
 8002a0c:	d801      	bhi.n	8002a12 <HAL_GPIO_Init+0x13a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	e001      	b.n	8002a16 <HAL_GPIO_Init+0x13e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d802      	bhi.n	8002a24 <HAL_GPIO_Init+0x14c>
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	e002      	b.n	8002a2a <HAL_GPIO_Init+0x152>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	3b08      	subs	r3, #8
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	210f      	movs	r1, #15
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a9 	beq.w	8002baa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a58:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_GPIO_Init+0x2ac>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_GPIO_Init+0x2ac>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_GPIO_Init+0x2ac>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a70:	4a45      	ldr	r2, [pc, #276]	; (8002b88 <HAL_GPIO_Init+0x2b0>)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <HAL_GPIO_Init+0x2b4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_GPIO_Init+0x1e0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <HAL_GPIO_Init+0x2b8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d007      	beq.n	8002ab4 <HAL_GPIO_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <HAL_GPIO_Init+0x2bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e004      	b.n	8002aba <HAL_GPIO_Init+0x1e2>
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_Init+0x1e2>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_GPIO_Init+0x1e2>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	f002 0203 	and.w	r2, r2, #3
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	4093      	lsls	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aca:	492f      	ldr	r1, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x2b0>)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	492b      	ldr	r1, [pc, #172]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4927      	ldr	r1, [pc, #156]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4921      	ldr	r1, [pc, #132]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	491d      	ldr	r1, [pc, #116]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4917      	ldr	r1, [pc, #92]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4913      	ldr	r1, [pc, #76]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01f      	beq.n	8002b9c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	490d      	ldr	r1, [pc, #52]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e01f      	b.n	8002baa <HAL_GPIO_Init+0x2d2>
 8002b6a:	bf00      	nop
 8002b6c:	10320000 	.word	0x10320000
 8002b70:	10310000 	.word	0x10310000
 8002b74:	10220000 	.word	0x10220000
 8002b78:	10210000 	.word	0x10210000
 8002b7c:	10120000 	.word	0x10120000
 8002b80:	10110000 	.word	0x10110000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40010800 	.word	0x40010800
 8002b90:	40010c00 	.word	0x40010c00
 8002b94:	40011000 	.word	0x40011000
 8002b98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_GPIO_Init+0x2f4>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	4909      	ldr	r1, [pc, #36]	; (8002bcc <HAL_GPIO_Init+0x2f4>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f47f ae96 	bne.w	80028ec <HAL_GPIO_Init+0x14>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	372c      	adds	r7, #44	; 0x2c
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	611a      	str	r2, [r3, #16]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	041a      	lsls	r2, r3, #16
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43d9      	mvns	r1, r3
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	400b      	ands	r3, r1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e12b      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fb44 	bl	80022e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f001 fe4e 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a81      	ldr	r2, [pc, #516]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d807      	bhi.n	8002cb8 <HAL_I2C_Init+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a80      	ldr	r2, [pc, #512]	; (8002eac <HAL_I2C_Init+0x278>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e006      	b.n	8002cc6 <HAL_I2C_Init+0x92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a7d      	ldr	r2, [pc, #500]	; (8002eb0 <HAL_I2C_Init+0x27c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e7      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_I2C_Init+0x280>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <HAL_I2C_Init+0xd4>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e009      	b.n	8002d1c <HAL_I2C_Init+0xe8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a69      	ldr	r2, [pc, #420]	; (8002eb8 <HAL_I2C_Init+0x284>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	495c      	ldr	r1, [pc, #368]	; (8002ea8 <HAL_I2C_Init+0x274>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d819      	bhi.n	8002d70 <HAL_I2C_Init+0x13c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e59      	subs	r1, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d50:	400b      	ands	r3, r1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_I2C_Init+0x138>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	e051      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e04f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_I2C_Init+0x168>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e012      	b.n	8002dc2 <HAL_I2C_Init+0x18e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	0099      	lsls	r1, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x196>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10e      	bne.n	8002df0 <HAL_I2C_Init+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e58      	subs	r0, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	440b      	add	r3, r1
 8002de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6809      	ldr	r1, [r1, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6911      	ldr	r1, [r2, #16]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	000186a0 	.word	0x000186a0
 8002eac:	001e847f 	.word	0x001e847f
 8002eb0:	003d08ff 	.word	0x003d08ff
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff fbf0 	bl	80026b4 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	f040 80e0 	bne.w	80030a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	4970      	ldr	r1, [pc, #448]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 ff72 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	e0d3      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x50>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0cc      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d007      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2221      	movs	r2, #33	; 0x21
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a50      	ldr	r2, [pc, #320]	; (80030b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f74:	8979      	ldrh	r1, [r7, #10]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fd2c 	bl	80039d8 <I2C_MasterRequestWrite>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e08d      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fa0:	e066      	b.n	8003070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6a39      	ldr	r1, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 ffec 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06b      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x188>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 ffdc 	bl	8004006 <I2C_WaitOnBTFFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b04      	cmp	r3, #4
 800305a:	d107      	bne.n	800306c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e01a      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d194      	bne.n	8002fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	00100002 	.word	0x00100002
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d2:	f7ff faef 	bl	80026b4 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	f040 80d9 	bne.w	8003298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2319      	movs	r3, #25
 80030ec:	2201      	movs	r2, #1
 80030ee:	496d      	ldr	r1, [pc, #436]	; (80032a4 <HAL_I2C_Mem_Write+0x1ec>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fe71 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0cc      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_I2C_Mem_Write+0x56>
 800310a:	2302      	movs	r3, #2
 800310c:	e0c5      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d007      	beq.n	8003134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a4d      	ldr	r2, [pc, #308]	; (80032a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003176:	88f8      	ldrh	r0, [r7, #6]
 8003178:	893a      	ldrh	r2, [r7, #8]
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fca8 	bl	8003adc <I2C_RequestMemoryWrite>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d052      	beq.n	8003238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e081      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fef2 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d107      	bne.n	80031be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11b      	bne.n	8003238 <HAL_I2C_Mem_Write+0x180>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1aa      	bne.n	8003196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fede 	bl	8004006 <I2C_WaitOnBTFFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b04      	cmp	r3, #4
 8003256:	d107      	bne.n	8003268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e016      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	00100002 	.word	0x00100002
 80032a8:	ffff0000 	.word	0xffff0000

080032ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	; 0x30
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	460b      	mov	r3, r1
 80032c0:	813b      	strh	r3, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ca:	f7ff f9f3 	bl	80026b4 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	f040 8244 	bne.w	8003766 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2319      	movs	r3, #25
 80032e4:	2201      	movs	r2, #1
 80032e6:	4982      	ldr	r1, [pc, #520]	; (80034f0 <HAL_I2C_Mem_Read+0x244>)
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fd75 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
 80032f6:	e237      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Mem_Read+0x5a>
 8003302:	2302      	movs	r3, #2
 8003304:	e230      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2222      	movs	r2, #34	; 0x22
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2240      	movs	r2, #64	; 0x40
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a62      	ldr	r2, [pc, #392]	; (80034f4 <HAL_I2C_Mem_Read+0x248>)
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336e:	88f8      	ldrh	r0, [r7, #6]
 8003370:	893a      	ldrh	r2, [r7, #8]
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4603      	mov	r3, r0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fc42 	bl	8003c08 <I2C_RequestMemoryRead>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1ec      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d113      	bne.n	80033be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e1c0      	b.n	8003740 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d11e      	bne.n	8003404 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033d6:	b672      	cpsid	i
}
 80033d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003400:	b662      	cpsie	i
}
 8003402:	e035      	b.n	8003470 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b02      	cmp	r3, #2
 800340a:	d11e      	bne.n	800344a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003446:	b662      	cpsie	i
}
 8003448:	e012      	b.n	8003470 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003458:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003470:	e166      	b.n	8003740 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	2b03      	cmp	r3, #3
 8003478:	f200 811f 	bhi.w	80036ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b01      	cmp	r3, #1
 8003482:	d123      	bne.n	80034cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fdfd 	bl	8004088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e167      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ca:	e139      	b.n	8003740 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d152      	bne.n	800357a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	2200      	movs	r2, #0
 80034dc:	4906      	ldr	r1, [pc, #24]	; (80034f8 <HAL_I2C_Mem_Read+0x24c>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fc7a 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e13c      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
 80034ee:	bf00      	nop
 80034f0:	00100002 	.word	0x00100002
 80034f4:	ffff0000 	.word	0xffff0000
 80034f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034fc:	b672      	cpsid	i
}
 80034fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003542:	b662      	cpsie	i
}
 8003544:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003578:	e0e2      	b.n	8003740 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2200      	movs	r2, #0
 8003582:	497b      	ldr	r1, [pc, #492]	; (8003770 <HAL_I2C_Mem_Read+0x4c4>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fc27 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0e9      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035da:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_I2C_Mem_Read+0x4c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_I2C_Mem_Read+0x4cc>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a1a      	lsrs	r2, r3, #8
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00da      	lsls	r2, r3, #3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003622:	b662      	cpsie	i
}
 8003624:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e09a      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d1d9      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003682:	b662      	cpsie	i
}
 8003684:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b8:	e042      	b.n	8003740 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fce2 	bl	8004088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e04c      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d118      	bne.n	8003740 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f ae94 	bne.w	8003472 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	00010004 	.word	0x00010004
 8003774:	200000b8 	.word	0x200000b8
 8003778:	14f8b589 	.word	0x14f8b589

0800377c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fe ff92 	bl	80026b4 <HAL_GetTick>
 8003790:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	f040 8111 	bne.w	80039c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2319      	movs	r3, #25
 80037aa:	2201      	movs	r2, #1
 80037ac:	4988      	ldr	r1, [pc, #544]	; (80039d0 <HAL_I2C_IsDeviceReady+0x254>)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb12 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	e104      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_I2C_IsDeviceReady+0x50>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0fd      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d007      	beq.n	80037f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2224      	movs	r2, #36	; 0x24
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a70      	ldr	r2, [pc, #448]	; (80039d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003824:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fad0 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384c:	d103      	bne.n	8003856 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0b6      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003868:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800386a:	f7fe ff23 	bl	80026b4 <HAL_GetTick>
 800386e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800389e:	e025      	b.n	80038ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7fe ff08 	bl	80026b4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <HAL_I2C_IsDeviceReady+0x13a>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22a0      	movs	r2, #160	; 0xa0
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2ba0      	cmp	r3, #160	; 0xa0
 80038f6:	d005      	beq.n	8003904 <HAL_I2C_IsDeviceReady+0x188>
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_I2C_IsDeviceReady+0x188>
 80038fe:	7dbb      	ldrb	r3, [r7, #22]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0cd      	beq.n	80038a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d129      	bne.n	800396e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2319      	movs	r3, #25
 8003946:	2201      	movs	r2, #1
 8003948:	4921      	ldr	r1, [pc, #132]	; (80039d0 <HAL_I2C_IsDeviceReady+0x254>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa44 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e036      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e02c      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003986:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2319      	movs	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	490f      	ldr	r1, [pc, #60]	; (80039d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa20 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e012      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	3301      	adds	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f4ff af32 	bcc.w	8003816 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00100002 	.word	0x00100002
 80039d4:	ffff0000 	.word	0xffff0000

080039d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	460b      	mov	r3, r1
 80039e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d006      	beq.n	8003a02 <I2C_MasterRequestWrite+0x2a>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d003      	beq.n	8003a02 <I2C_MasterRequestWrite+0x2a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a00:	d108      	bne.n	8003a14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00b      	b.n	8003a2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b12      	cmp	r3, #18
 8003a1a:	d107      	bne.n	8003a2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9cd 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e035      	b.n	8003acc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a68:	d108      	bne.n	8003a7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a6a:	897b      	ldrh	r3, [r7, #10]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	e01b      	b.n	8003ab4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	11db      	asrs	r3, r3, #7
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0306 	and.w	r3, r3, #6
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f063 030f 	orn	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <I2C_MasterRequestWrite+0xfc>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9f3 	bl	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e010      	b.n	8003acc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4907      	ldr	r1, [pc, #28]	; (8003ad8 <I2C_MasterRequestWrite+0x100>)
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f9e3 	bl	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	00010008 	.word	0x00010008
 8003ad8:	00010002 	.word	0x00010002

08003adc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f960 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2c:	d103      	bne.n	8003b36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e05f      	b.n	8003bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	492d      	ldr	r1, [pc, #180]	; (8003c04 <I2C_RequestMemoryWrite+0x128>)
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f998 	bl	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e04c      	b.n	8003bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa02 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e02b      	b.n	8003bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e021      	b.n	8003bf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	6a39      	ldr	r1, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f9dc 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d107      	bne.n	8003bea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e005      	b.n	8003bfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bee:	893b      	ldrh	r3, [r7, #8]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	00010002 	.word	0x00010002

08003c08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f8c2 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c68:	d103      	bne.n	8003c72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0aa      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	4952      	ldr	r1, [pc, #328]	; (8003dd4 <I2C_RequestMemoryRead+0x1cc>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f8fa 	bl	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e097      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	6a39      	ldr	r1, [r7, #32]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f964 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d107      	bne.n	8003cda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e076      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d105      	bne.n	8003cf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]
 8003cee:	e021      	b.n	8003d34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	6a39      	ldr	r1, [r7, #32]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f93e 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d107      	bne.n	8003d26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e050      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	6a39      	ldr	r1, [r7, #32]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f923 	bl	8003f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d107      	bne.n	8003d5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e035      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f82b 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d96:	d103      	bne.n	8003da0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e013      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003da4:	897b      	ldrh	r3, [r7, #10]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <I2C_RequestMemoryRead+0x1cc>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f863 	bl	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	00010002 	.word	0x00010002

08003dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de8:	e025      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d021      	beq.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fe fc5f 	bl	80026b4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e023      	b.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10d      	bne.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	e00c      	b.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	43da      	mvns	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0b6      	beq.n	8003dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e94:	e051      	b.n	8003f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea4:	d123      	bne.n	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0204 	orr.w	r2, r3, #4
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e046      	b.n	8003f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d021      	beq.n	8003f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fe fbdd 	bl	80026b4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d116      	bne.n	8003f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e020      	b.n	8003f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10c      	bne.n	8003f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e00b      	b.n	8003f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d18d      	bne.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f90:	e02d      	b.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f8ce 	bl	8004134 <I2C_IsAcknowledgeFailed>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e02d      	b.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d021      	beq.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe fb83 	bl	80026b4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d116      	bne.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d1ca      	bne.n	8003f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004012:	e02d      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f88d 	bl	8004134 <I2C_IsAcknowledgeFailed>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e02d      	b.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d021      	beq.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fe fb42 	bl	80026b4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e007      	b.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d1ca      	bne.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004094:	e042      	b.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d119      	bne.n	80040d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0210 	mvn.w	r2, #16
 80040ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e029      	b.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe faec 	bl	80026b4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d1b5      	bne.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d11b      	bne.n	8004184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e272      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8087 	beq.w	80042be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	4b92      	ldr	r3, [pc, #584]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041bc:	4b8f      	ldr	r3, [pc, #572]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d112      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
 80041c8:	4b8c      	ldr	r3, [pc, #560]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06c      	beq.n	80042bc <HAL_RCC_OscConfig+0x12c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d168      	bne.n	80042bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e24c      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x76>
 80041f8:	4b80      	ldr	r3, [pc, #512]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7f      	ldr	r2, [pc, #508]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e02e      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b7b      	ldr	r3, [pc, #492]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7a      	ldr	r2, [pc, #488]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b78      	ldr	r3, [pc, #480]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a77      	ldr	r2, [pc, #476]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xbc>
 8004232:	4b72      	ldr	r3, [pc, #456]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a71      	ldr	r2, [pc, #452]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b6f      	ldr	r3, [pc, #444]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6e      	ldr	r2, [pc, #440]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 800424c:	4b6b      	ldr	r3, [pc, #428]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a67      	ldr	r2, [pc, #412]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fe fa22 	bl	80026b4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fe fa1e 	bl	80026b4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e200      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b5d      	ldr	r3, [pc, #372]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xe4>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe fa0e 	bl	80026b4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe fa0a 	bl	80026b4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1ec      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x10c>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042d6:	4b49      	ldr	r3, [pc, #292]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11c      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
 80042e2:	4b46      	ldr	r3, [pc, #280]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e1c0      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4939      	ldr	r1, [pc, #228]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	e03a      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_RCC_OscConfig+0x270>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe f9c3 	bl	80026b4 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7fe f9bf 	bl	80026b4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1a1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004344:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004350:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4927      	ldr	r1, [pc, #156]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	e015      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_RCC_OscConfig+0x270>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe f9a2 	bl	80026b4 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004374:	f7fe f99e 	bl	80026b4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e180      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03a      	beq.n	8004414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d019      	beq.n	80043da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ac:	f7fe f982 	bl	80026b4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fe f97e 	bl	80026b4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e160      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_RCC_OscConfig+0x26c>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 fac4 	bl	8004960 <RCC_Delay>
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_OscConfig+0x274>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e0:	f7fe f968 	bl	80026b4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe f964 	bl	80026b4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d908      	bls.n	8004408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e146      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	42420000 	.word	0x42420000
 8004404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e9      	bne.n	80043e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a6 	beq.w	800456e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	61d3      	str	r3, [r2, #28]
 800443e:	4b85      	ldr	r3, [pc, #532]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b82      	ldr	r3, [pc, #520]	; (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fe f925 	bl	80026b4 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fe f921 	bl	80026b4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	; 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e103      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b75      	ldr	r3, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x312>
 8004494:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x334>
 80044aa:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a69      	ldr	r2, [pc, #420]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a66      	ldr	r2, [pc, #408]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	e01c      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCC_OscConfig+0x356>
 80044cc:	4b61      	ldr	r3, [pc, #388]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a60      	ldr	r2, [pc, #384]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	4b5e      	ldr	r3, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a5d      	ldr	r2, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044e6:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6213      	str	r3, [r2, #32]
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a57      	ldr	r2, [pc, #348]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fe f8d5 	bl	80026b4 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe f8d1 	bl	80026b4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0b1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCC_OscConfig+0x37e>
 8004530:	e014      	b.n	800455c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004532:	f7fe f8bf 	bl	80026b4 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fe f8bb 	bl	80026b4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e09b      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ee      	bne.n	800453a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4b3c      	ldr	r3, [pc, #240]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8087 	beq.w	8004686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d061      	beq.n	8004648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d146      	bne.n	800461a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458c:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCC_OscConfig+0x4cc>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fe f88f 	bl	80026b4 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fe f88b 	bl	80026b4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e06d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4921      	ldr	r1, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d4:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a19      	ldr	r1, [r3, #32]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	430b      	orrs	r3, r1
 80045e6:	491b      	ldr	r1, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fe f85f 	bl	80026b4 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fe f85b 	bl	80026b4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x46a>
 8004618:	e035      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_RCC_OscConfig+0x4cc>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe f848 	bl	80026b4 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe f844 	bl	80026b4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e026      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x498>
 8004646:	e01e      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e019      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004654:	40021000 	.word	0x40021000
 8004658:	40007000 	.word	0x40007000
 800465c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_OscConfig+0x500>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	429a      	cmp	r2, r3
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0d0      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a8:	4b6a      	ldr	r3, [pc, #424]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d910      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4965      	ldr	r1, [pc, #404]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a52      	ldr	r2, [pc, #328]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d040      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d115      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e073      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004772:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 0203 	bic.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4936      	ldr	r1, [pc, #216]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004784:	f7fd ff96 	bl	80026b4 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7fd ff92 	bl	80026b4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e053      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 020c 	and.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1eb      	bne.n	800478c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d210      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4922      	ldr	r1, [pc, #136]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f821 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1cc>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd fef4 	bl	8002630 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	40021000 	.word	0x40021000
 800485c:	080073a4 	.word	0x080073a4
 8004860:	200000b8 	.word	0x200000b8
 8004864:	200000bc 	.word	0x200000bc

08004868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004868:	b490      	push	{r4, r7}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_RCC_GetSysClockFreq+0xac>)
 8004870:	1d3c      	adds	r4, r7, #4
 8004872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004878:	f240 2301 	movw	r3, #513	; 0x201
 800487c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x40>
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x46>
 80048a6:	e02b      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048aa:	623b      	str	r3, [r7, #32]
      break;
 80048ac:	e02b      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	0c9b      	lsrs	r3, r3, #18
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3328      	adds	r3, #40	; 0x28
 80048b8:	443b      	add	r3, r7
 80048ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	0c5b      	lsrs	r3, r3, #17
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	3328      	adds	r3, #40	; 0x28
 80048d6:	443b      	add	r3, r7
 80048d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048e2:	fb03 f202 	mul.w	r2, r3, r2
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	e004      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	623b      	str	r3, [r7, #32]
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004902:	623b      	str	r3, [r7, #32]
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6a3b      	ldr	r3, [r7, #32]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3728      	adds	r7, #40	; 0x28
 800490c:	46bd      	mov	sp, r7
 800490e:	bc90      	pop	{r4, r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	08006638 	.word	0x08006638
 8004918:	40021000 	.word	0x40021000
 800491c:	007a1200 	.word	0x007a1200
 8004920:	003d0900 	.word	0x003d0900

08004924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <HAL_RCC_GetHCLKFreq+0x10>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	200000b8 	.word	0x200000b8

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800493c:	f7ff fff2 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000
 800495c:	080073b4 	.word	0x080073b4

08004960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <RCC_Delay+0x34>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <RCC_Delay+0x38>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0a5b      	lsrs	r3, r3, #9
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800497c:	bf00      	nop
  }
  while (Delay --);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e5a      	subs	r2, r3, #1
 8004982:	60fa      	str	r2, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <RCC_Delay+0x1c>
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	200000b8 	.word	0x200000b8
 8004998:	10624dd3 	.word	0x10624dd3

0800499c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e041      	b.n	8004a32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fcd0 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 fa2a 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_PWM_Start+0x24>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e022      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d109      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x3e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e015      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_PWM_Start+0x58>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e008      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x6a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e059      	b.n	8004b62 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0x82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0x92>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb80 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <HAL_TIM_PWM_Start+0x130>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d107      	bne.n	8004b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIM_PWM_Start+0x130>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_TIM_PWM_Start+0xf0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_PWM_Start+0xf0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_TIM_PWM_Start+0x134>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d111      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d010      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e007      	b.n	8004b60 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400

08004b74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e093      	b.n	8004cb0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fd fc01 	bl	80023a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f000 f933 	bl	8004e34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	4313      	orrs	r3, r2
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c14:	f023 030c 	bic.w	r3, r3, #12
 8004c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	4313      	orrs	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	011a      	lsls	r2, r3, #4
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	031b      	lsls	r3, r3, #12
 8004c44:	4313      	orrs	r3, r2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e0ac      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	f200 809f 	bhi.w	8004e20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d1d 	.word	0x08004d1d
 8004cec:	08004e21 	.word	0x08004e21
 8004cf0:	08004e21 	.word	0x08004e21
 8004cf4:	08004e21 	.word	0x08004e21
 8004cf8:	08004d5d 	.word	0x08004d5d
 8004cfc:	08004e21 	.word	0x08004e21
 8004d00:	08004e21 	.word	0x08004e21
 8004d04:	08004e21 	.word	0x08004e21
 8004d08:	08004d9f 	.word	0x08004d9f
 8004d0c:	08004e21 	.word	0x08004e21
 8004d10:	08004e21 	.word	0x08004e21
 8004d14:	08004e21 	.word	0x08004e21
 8004d18:	08004ddf 	.word	0x08004ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f8de 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0208 	orr.w	r2, r2, #8
 8004d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0204 	bic.w	r2, r2, #4
 8004d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6999      	ldr	r1, [r3, #24]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	619a      	str	r2, [r3, #24]
      break;
 8004d5a:	e062      	b.n	8004e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f924 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6999      	ldr	r1, [r3, #24]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	619a      	str	r2, [r3, #24]
      break;
 8004d9c:	e041      	b.n	8004e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f96d 	bl	8005084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0208 	orr.w	r2, r2, #8
 8004db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0204 	bic.w	r2, r2, #4
 8004dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69d9      	ldr	r1, [r3, #28]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	61da      	str	r2, [r3, #28]
      break;
 8004ddc:	e021      	b.n	8004e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f9b7 	bl	8005158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69d9      	ldr	r1, [r3, #28]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	021a      	lsls	r2, r3, #8
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	61da      	str	r2, [r3, #28]
      break;
 8004e1e:	e000      	b.n	8004e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <TIM_Base_SetConfig+0xa8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x28>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x28>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <TIM_Base_SetConfig+0xac>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <TIM_Base_SetConfig+0xa8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x52>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x52>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <TIM_Base_SetConfig+0xac>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <TIM_Base_SetConfig+0xa8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d103      	bne.n	8004ecc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0210 	bic.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <TIM_OC2_SetConfig+0xd0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a14      	ldr	r2, [pc, #80]	; (8005080 <TIM_OC2_SetConfig+0xd0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00

08005084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <TIM_OC3_SetConfig+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10d      	bne.n	80050fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <TIM_OC3_SetConfig+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d113      	bne.n	800512e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800510c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00

08005158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	031b      	lsls	r3, r3, #12
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <TIM_OC4_SetConfig+0x98>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e041      	b.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d004      	beq.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10c      	bne.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400

080052ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e03d      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <LL_GPIO_SetPinMode>:
{
 800538e:	b490      	push	{r4, r7}
 8005390:	b088      	sub	sp, #32
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	4413      	add	r3, r2
 80053a4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	fab3 f383 	clz	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	210f      	movs	r1, #15
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	61bb      	str	r3, [r7, #24]
  return result;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	fab3 f383 	clz	r3, r3
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	6023      	str	r3, [r4, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc90      	pop	{r4, r7}
 80053f0:	4770      	bx	lr

080053f2 <LL_GPIO_SetPinSpeed>:
{
 80053f2:	b490      	push	{r4, r7}
 80053f4:	b088      	sub	sp, #32
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	0e1b      	lsrs	r3, r3, #24
 8005406:	4413      	add	r3, r2
 8005408:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	613b      	str	r3, [r7, #16]
  return result;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	2103      	movs	r1, #3
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	fa93 f3a3 	rbit	r3, r3
 8005436:	61bb      	str	r3, [r7, #24]
  return result;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	4313      	orrs	r3, r2
 800544a:	6023      	str	r3, [r4, #0]
}
 800544c:	bf00      	nop
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bc90      	pop	{r4, r7}
 8005454:	4770      	bx	lr

08005456 <LL_GPIO_SetPinOutputType>:
{
 8005456:	b490      	push	{r4, r7}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	4413      	add	r3, r2
 800546c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	613b      	str	r3, [r7, #16]
  return result;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	2104      	movs	r1, #4
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	61bb      	str	r3, [r7, #24]
  return result;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	6023      	str	r3, [r4, #0]
}
 80054b0:	bf00      	nop
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc90      	pop	{r4, r7}
 80054b8:	4770      	bx	lr

080054ba <LL_GPIO_SetPinPull>:
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	43db      	mvns	r3, r3
 80054d0:	401a      	ands	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	613b      	str	r3, [r7, #16]
  return result;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	4619      	mov	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	408b      	lsls	r3, r1
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60da      	str	r2, [r3, #12]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	60fb      	str	r3, [r7, #12]
  return result;
 800551e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8005528:	e044      	b.n	80055b4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800552a:	2201      	movs	r2, #1
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	409a      	lsls	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d03a      	beq.n	80055ae <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b07      	cmp	r3, #7
 800553c:	d806      	bhi.n	800554c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800553e:	f240 1201 	movw	r2, #257	; 0x101
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e008      	b.n	800555e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3b08      	subs	r3, #8
 8005550:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800555c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b08      	cmp	r3, #8
 8005564:	d106      	bne.n	8005574 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	461a      	mov	r2, r3
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ffa3 	bl	80054ba <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	461a      	mov	r2, r3
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ff06 	bl	800538e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <LL_GPIO_Init+0x94>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d10d      	bne.n	80055ae <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	461a      	mov	r2, r3
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff ff29 	bl	80053f2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	461a      	mov	r2, r3
 80055a6:	69b9      	ldr	r1, [r7, #24]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff54 	bl	8005456 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1b4      	bne.n	800552a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <__errno>:
 80055cc:	4b01      	ldr	r3, [pc, #4]	; (80055d4 <__errno+0x8>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	200000c4 	.word	0x200000c4

080055d8 <__libc_init_array>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	2600      	movs	r6, #0
 80055dc:	4d0c      	ldr	r5, [pc, #48]	; (8005610 <__libc_init_array+0x38>)
 80055de:	4c0d      	ldr	r4, [pc, #52]	; (8005614 <__libc_init_array+0x3c>)
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	42a6      	cmp	r6, r4
 80055e6:	d109      	bne.n	80055fc <__libc_init_array+0x24>
 80055e8:	f000 fffc 	bl	80065e4 <_init>
 80055ec:	2600      	movs	r6, #0
 80055ee:	4d0a      	ldr	r5, [pc, #40]	; (8005618 <__libc_init_array+0x40>)
 80055f0:	4c0a      	ldr	r4, [pc, #40]	; (800561c <__libc_init_array+0x44>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	d105      	bne.n	8005606 <__libc_init_array+0x2e>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005600:	4798      	blx	r3
 8005602:	3601      	adds	r6, #1
 8005604:	e7ee      	b.n	80055e4 <__libc_init_array+0xc>
 8005606:	f855 3b04 	ldr.w	r3, [r5], #4
 800560a:	4798      	blx	r3
 800560c:	3601      	adds	r6, #1
 800560e:	e7f2      	b.n	80055f6 <__libc_init_array+0x1e>
 8005610:	08007460 	.word	0x08007460
 8005614:	08007460 	.word	0x08007460
 8005618:	08007460 	.word	0x08007460
 800561c:	08007464 	.word	0x08007464

08005620 <malloc>:
 8005620:	4b02      	ldr	r3, [pc, #8]	; (800562c <malloc+0xc>)
 8005622:	4601      	mov	r1, r0
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	f000 b87b 	b.w	8005720 <_malloc_r>
 800562a:	bf00      	nop
 800562c:	200000c4 	.word	0x200000c4

08005630 <free>:
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <free+0xc>)
 8005632:	4601      	mov	r1, r0
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	f000 b80b 	b.w	8005650 <_free_r>
 800563a:	bf00      	nop
 800563c:	200000c4 	.word	0x200000c4

08005640 <memset>:
 8005640:	4603      	mov	r3, r0
 8005642:	4402      	add	r2, r0
 8005644:	4293      	cmp	r3, r2
 8005646:	d100      	bne.n	800564a <memset+0xa>
 8005648:	4770      	bx	lr
 800564a:	f803 1b01 	strb.w	r1, [r3], #1
 800564e:	e7f9      	b.n	8005644 <memset+0x4>

08005650 <_free_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4605      	mov	r5, r0
 8005654:	2900      	cmp	r1, #0
 8005656:	d040      	beq.n	80056da <_free_r+0x8a>
 8005658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565c:	1f0c      	subs	r4, r1, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	18e4      	addlt	r4, r4, r3
 8005664:	f000 f918 	bl	8005898 <__malloc_lock>
 8005668:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <_free_r+0x8c>)
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	b933      	cbnz	r3, 800567c <_free_r+0x2c>
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	6014      	str	r4, [r2, #0]
 8005672:	4628      	mov	r0, r5
 8005674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005678:	f000 b914 	b.w	80058a4 <__malloc_unlock>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d908      	bls.n	8005692 <_free_r+0x42>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	1821      	adds	r1, r4, r0
 8005684:	428b      	cmp	r3, r1
 8005686:	bf01      	itttt	eq
 8005688:	6819      	ldreq	r1, [r3, #0]
 800568a:	685b      	ldreq	r3, [r3, #4]
 800568c:	1809      	addeq	r1, r1, r0
 800568e:	6021      	streq	r1, [r4, #0]
 8005690:	e7ed      	b.n	800566e <_free_r+0x1e>
 8005692:	461a      	mov	r2, r3
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b10b      	cbz	r3, 800569c <_free_r+0x4c>
 8005698:	42a3      	cmp	r3, r4
 800569a:	d9fa      	bls.n	8005692 <_free_r+0x42>
 800569c:	6811      	ldr	r1, [r2, #0]
 800569e:	1850      	adds	r0, r2, r1
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d10b      	bne.n	80056bc <_free_r+0x6c>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	4401      	add	r1, r0
 80056a8:	1850      	adds	r0, r2, r1
 80056aa:	4283      	cmp	r3, r0
 80056ac:	6011      	str	r1, [r2, #0]
 80056ae:	d1e0      	bne.n	8005672 <_free_r+0x22>
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4401      	add	r1, r0
 80056b6:	6011      	str	r1, [r2, #0]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	e7da      	b.n	8005672 <_free_r+0x22>
 80056bc:	d902      	bls.n	80056c4 <_free_r+0x74>
 80056be:	230c      	movs	r3, #12
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	e7d6      	b.n	8005672 <_free_r+0x22>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	1821      	adds	r1, r4, r0
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1809      	addeq	r1, r1, r0
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	6054      	str	r4, [r2, #4]
 80056d8:	e7cb      	b.n	8005672 <_free_r+0x22>
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000700 	.word	0x20000700

080056e0 <sbrk_aligned>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4e0e      	ldr	r6, [pc, #56]	; (800571c <sbrk_aligned+0x3c>)
 80056e4:	460c      	mov	r4, r1
 80056e6:	6831      	ldr	r1, [r6, #0]
 80056e8:	4605      	mov	r5, r0
 80056ea:	b911      	cbnz	r1, 80056f2 <sbrk_aligned+0x12>
 80056ec:	f000 f88c 	bl	8005808 <_sbrk_r>
 80056f0:	6030      	str	r0, [r6, #0]
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f887 	bl	8005808 <_sbrk_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d00a      	beq.n	8005714 <sbrk_aligned+0x34>
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d007      	beq.n	8005718 <sbrk_aligned+0x38>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f87c 	bl	8005808 <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d101      	bne.n	8005718 <sbrk_aligned+0x38>
 8005714:	f04f 34ff 	mov.w	r4, #4294967295
 8005718:	4620      	mov	r0, r4
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	20000704 	.word	0x20000704

08005720 <_malloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	1ccd      	adds	r5, r1, #3
 8005726:	f025 0503 	bic.w	r5, r5, #3
 800572a:	3508      	adds	r5, #8
 800572c:	2d0c      	cmp	r5, #12
 800572e:	bf38      	it	cc
 8005730:	250c      	movcc	r5, #12
 8005732:	2d00      	cmp	r5, #0
 8005734:	4607      	mov	r7, r0
 8005736:	db01      	blt.n	800573c <_malloc_r+0x1c>
 8005738:	42a9      	cmp	r1, r5
 800573a:	d905      	bls.n	8005748 <_malloc_r+0x28>
 800573c:	230c      	movs	r3, #12
 800573e:	2600      	movs	r6, #0
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4630      	mov	r0, r6
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	4e2e      	ldr	r6, [pc, #184]	; (8005804 <_malloc_r+0xe4>)
 800574a:	f000 f8a5 	bl	8005898 <__malloc_lock>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	461c      	mov	r4, r3
 8005752:	bb34      	cbnz	r4, 80057a2 <_malloc_r+0x82>
 8005754:	4629      	mov	r1, r5
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ffc2 	bl	80056e0 <sbrk_aligned>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	4604      	mov	r4, r0
 8005760:	d14d      	bne.n	80057fe <_malloc_r+0xde>
 8005762:	6834      	ldr	r4, [r6, #0]
 8005764:	4626      	mov	r6, r4
 8005766:	2e00      	cmp	r6, #0
 8005768:	d140      	bne.n	80057ec <_malloc_r+0xcc>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4631      	mov	r1, r6
 800576e:	4638      	mov	r0, r7
 8005770:	eb04 0803 	add.w	r8, r4, r3
 8005774:	f000 f848 	bl	8005808 <_sbrk_r>
 8005778:	4580      	cmp	r8, r0
 800577a:	d13a      	bne.n	80057f2 <_malloc_r+0xd2>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	3503      	adds	r5, #3
 8005780:	1a6d      	subs	r5, r5, r1
 8005782:	f025 0503 	bic.w	r5, r5, #3
 8005786:	3508      	adds	r5, #8
 8005788:	2d0c      	cmp	r5, #12
 800578a:	bf38      	it	cc
 800578c:	250c      	movcc	r5, #12
 800578e:	4638      	mov	r0, r7
 8005790:	4629      	mov	r1, r5
 8005792:	f7ff ffa5 	bl	80056e0 <sbrk_aligned>
 8005796:	3001      	adds	r0, #1
 8005798:	d02b      	beq.n	80057f2 <_malloc_r+0xd2>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	442b      	add	r3, r5
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	e00e      	b.n	80057c0 <_malloc_r+0xa0>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	1b52      	subs	r2, r2, r5
 80057a6:	d41e      	bmi.n	80057e6 <_malloc_r+0xc6>
 80057a8:	2a0b      	cmp	r2, #11
 80057aa:	d916      	bls.n	80057da <_malloc_r+0xba>
 80057ac:	1961      	adds	r1, r4, r5
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	bf18      	it	ne
 80057b4:	6059      	strne	r1, [r3, #4]
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	bf08      	it	eq
 80057ba:	6031      	streq	r1, [r6, #0]
 80057bc:	5162      	str	r2, [r4, r5]
 80057be:	604b      	str	r3, [r1, #4]
 80057c0:	4638      	mov	r0, r7
 80057c2:	f104 060b 	add.w	r6, r4, #11
 80057c6:	f000 f86d 	bl	80058a4 <__malloc_unlock>
 80057ca:	f026 0607 	bic.w	r6, r6, #7
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	1af2      	subs	r2, r6, r3
 80057d2:	d0b6      	beq.n	8005742 <_malloc_r+0x22>
 80057d4:	1b9b      	subs	r3, r3, r6
 80057d6:	50a3      	str	r3, [r4, r2]
 80057d8:	e7b3      	b.n	8005742 <_malloc_r+0x22>
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	42a3      	cmp	r3, r4
 80057de:	bf0c      	ite	eq
 80057e0:	6032      	streq	r2, [r6, #0]
 80057e2:	605a      	strne	r2, [r3, #4]
 80057e4:	e7ec      	b.n	80057c0 <_malloc_r+0xa0>
 80057e6:	4623      	mov	r3, r4
 80057e8:	6864      	ldr	r4, [r4, #4]
 80057ea:	e7b2      	b.n	8005752 <_malloc_r+0x32>
 80057ec:	4634      	mov	r4, r6
 80057ee:	6876      	ldr	r6, [r6, #4]
 80057f0:	e7b9      	b.n	8005766 <_malloc_r+0x46>
 80057f2:	230c      	movs	r3, #12
 80057f4:	4638      	mov	r0, r7
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	f000 f854 	bl	80058a4 <__malloc_unlock>
 80057fc:	e7a1      	b.n	8005742 <_malloc_r+0x22>
 80057fe:	6025      	str	r5, [r4, #0]
 8005800:	e7de      	b.n	80057c0 <_malloc_r+0xa0>
 8005802:	bf00      	nop
 8005804:	20000700 	.word	0x20000700

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	2300      	movs	r3, #0
 800580c:	4d05      	ldr	r5, [pc, #20]	; (8005824 <_sbrk_r+0x1c>)
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fc fe94 	bl	8002540 <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000708 	.word	0x20000708

08005828 <siprintf>:
 8005828:	b40e      	push	{r1, r2, r3}
 800582a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800582e:	b500      	push	{lr}
 8005830:	b09c      	sub	sp, #112	; 0x70
 8005832:	ab1d      	add	r3, sp, #116	; 0x74
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	9107      	str	r1, [sp, #28]
 800583a:	9104      	str	r1, [sp, #16]
 800583c:	4808      	ldr	r0, [pc, #32]	; (8005860 <siprintf+0x38>)
 800583e:	4909      	ldr	r1, [pc, #36]	; (8005864 <siprintf+0x3c>)
 8005840:	f853 2b04 	ldr.w	r2, [r3], #4
 8005844:	9105      	str	r1, [sp, #20]
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	a902      	add	r1, sp, #8
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	f000 f88c 	bl	8005968 <_svfiprintf_r>
 8005850:	2200      	movs	r2, #0
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	b01c      	add	sp, #112	; 0x70
 8005858:	f85d eb04 	ldr.w	lr, [sp], #4
 800585c:	b003      	add	sp, #12
 800585e:	4770      	bx	lr
 8005860:	200000c4 	.word	0x200000c4
 8005864:	ffff0208 	.word	0xffff0208

08005868 <strcat>:
 8005868:	4602      	mov	r2, r0
 800586a:	b510      	push	{r4, lr}
 800586c:	7814      	ldrb	r4, [r2, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	3201      	adds	r2, #1
 8005872:	2c00      	cmp	r4, #0
 8005874:	d1fa      	bne.n	800586c <strcat+0x4>
 8005876:	3b01      	subs	r3, #1
 8005878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800587c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005880:	2a00      	cmp	r2, #0
 8005882:	d1f9      	bne.n	8005878 <strcat+0x10>
 8005884:	bd10      	pop	{r4, pc}

08005886 <strcpy>:
 8005886:	4603      	mov	r3, r0
 8005888:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588c:	f803 2b01 	strb.w	r2, [r3], #1
 8005890:	2a00      	cmp	r2, #0
 8005892:	d1f9      	bne.n	8005888 <strcpy+0x2>
 8005894:	4770      	bx	lr
	...

08005898 <__malloc_lock>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__malloc_lock+0x8>)
 800589a:	f000 bafb 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	2000070c 	.word	0x2000070c

080058a4 <__malloc_unlock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_unlock+0x8>)
 80058a6:	f000 baf6 	b.w	8005e96 <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	2000070c 	.word	0x2000070c

080058b0 <__ssputs_r>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	688e      	ldr	r6, [r1, #8]
 80058b6:	4682      	mov	sl, r0
 80058b8:	429e      	cmp	r6, r3
 80058ba:	460c      	mov	r4, r1
 80058bc:	4690      	mov	r8, r2
 80058be:	461f      	mov	r7, r3
 80058c0:	d838      	bhi.n	8005934 <__ssputs_r+0x84>
 80058c2:	898a      	ldrh	r2, [r1, #12]
 80058c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058c8:	d032      	beq.n	8005930 <__ssputs_r+0x80>
 80058ca:	6825      	ldr	r5, [r4, #0]
 80058cc:	6909      	ldr	r1, [r1, #16]
 80058ce:	3301      	adds	r3, #1
 80058d0:	eba5 0901 	sub.w	r9, r5, r1
 80058d4:	6965      	ldr	r5, [r4, #20]
 80058d6:	444b      	add	r3, r9
 80058d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058e0:	106d      	asrs	r5, r5, #1
 80058e2:	429d      	cmp	r5, r3
 80058e4:	bf38      	it	cc
 80058e6:	461d      	movcc	r5, r3
 80058e8:	0553      	lsls	r3, r2, #21
 80058ea:	d531      	bpl.n	8005950 <__ssputs_r+0xa0>
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7ff ff17 	bl	8005720 <_malloc_r>
 80058f2:	4606      	mov	r6, r0
 80058f4:	b950      	cbnz	r0, 800590c <__ssputs_r+0x5c>
 80058f6:	230c      	movs	r3, #12
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	f8ca 3000 	str.w	r3, [sl]
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	464a      	mov	r2, r9
 800590e:	6921      	ldr	r1, [r4, #16]
 8005910:	f000 fad0 	bl	8005eb4 <memcpy>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800591a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	6126      	str	r6, [r4, #16]
 8005922:	444e      	add	r6, r9
 8005924:	6026      	str	r6, [r4, #0]
 8005926:	463e      	mov	r6, r7
 8005928:	6165      	str	r5, [r4, #20]
 800592a:	eba5 0509 	sub.w	r5, r5, r9
 800592e:	60a5      	str	r5, [r4, #8]
 8005930:	42be      	cmp	r6, r7
 8005932:	d900      	bls.n	8005936 <__ssputs_r+0x86>
 8005934:	463e      	mov	r6, r7
 8005936:	4632      	mov	r2, r6
 8005938:	4641      	mov	r1, r8
 800593a:	6820      	ldr	r0, [r4, #0]
 800593c:	f000 fac8 	bl	8005ed0 <memmove>
 8005940:	68a3      	ldr	r3, [r4, #8]
 8005942:	2000      	movs	r0, #0
 8005944:	1b9b      	subs	r3, r3, r6
 8005946:	60a3      	str	r3, [r4, #8]
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	4433      	add	r3, r6
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	e7db      	b.n	8005908 <__ssputs_r+0x58>
 8005950:	462a      	mov	r2, r5
 8005952:	f000 fad7 	bl	8005f04 <_realloc_r>
 8005956:	4606      	mov	r6, r0
 8005958:	2800      	cmp	r0, #0
 800595a:	d1e1      	bne.n	8005920 <__ssputs_r+0x70>
 800595c:	4650      	mov	r0, sl
 800595e:	6921      	ldr	r1, [r4, #16]
 8005960:	f7ff fe76 	bl	8005650 <_free_r>
 8005964:	e7c7      	b.n	80058f6 <__ssputs_r+0x46>
	...

08005968 <_svfiprintf_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4698      	mov	r8, r3
 800596e:	898b      	ldrh	r3, [r1, #12]
 8005970:	4607      	mov	r7, r0
 8005972:	061b      	lsls	r3, r3, #24
 8005974:	460d      	mov	r5, r1
 8005976:	4614      	mov	r4, r2
 8005978:	b09d      	sub	sp, #116	; 0x74
 800597a:	d50e      	bpl.n	800599a <_svfiprintf_r+0x32>
 800597c:	690b      	ldr	r3, [r1, #16]
 800597e:	b963      	cbnz	r3, 800599a <_svfiprintf_r+0x32>
 8005980:	2140      	movs	r1, #64	; 0x40
 8005982:	f7ff fecd 	bl	8005720 <_malloc_r>
 8005986:	6028      	str	r0, [r5, #0]
 8005988:	6128      	str	r0, [r5, #16]
 800598a:	b920      	cbnz	r0, 8005996 <_svfiprintf_r+0x2e>
 800598c:	230c      	movs	r3, #12
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e0d1      	b.n	8005b3a <_svfiprintf_r+0x1d2>
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	616b      	str	r3, [r5, #20]
 800599a:	2300      	movs	r3, #0
 800599c:	9309      	str	r3, [sp, #36]	; 0x24
 800599e:	2320      	movs	r3, #32
 80059a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059a4:	2330      	movs	r3, #48	; 0x30
 80059a6:	f04f 0901 	mov.w	r9, #1
 80059aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b54 <_svfiprintf_r+0x1ec>
 80059b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b6:	4623      	mov	r3, r4
 80059b8:	469a      	mov	sl, r3
 80059ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059be:	b10a      	cbz	r2, 80059c4 <_svfiprintf_r+0x5c>
 80059c0:	2a25      	cmp	r2, #37	; 0x25
 80059c2:	d1f9      	bne.n	80059b8 <_svfiprintf_r+0x50>
 80059c4:	ebba 0b04 	subs.w	fp, sl, r4
 80059c8:	d00b      	beq.n	80059e2 <_svfiprintf_r+0x7a>
 80059ca:	465b      	mov	r3, fp
 80059cc:	4622      	mov	r2, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ff6d 	bl	80058b0 <__ssputs_r>
 80059d6:	3001      	adds	r0, #1
 80059d8:	f000 80aa 	beq.w	8005b30 <_svfiprintf_r+0x1c8>
 80059dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059de:	445a      	add	r2, fp
 80059e0:	9209      	str	r2, [sp, #36]	; 0x24
 80059e2:	f89a 3000 	ldrb.w	r3, [sl]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80a2 	beq.w	8005b30 <_svfiprintf_r+0x1c8>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f04f 32ff 	mov.w	r2, #4294967295
 80059f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f6:	f10a 0a01 	add.w	sl, sl, #1
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a02:	931a      	str	r3, [sp, #104]	; 0x68
 8005a04:	4654      	mov	r4, sl
 8005a06:	2205      	movs	r2, #5
 8005a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0c:	4851      	ldr	r0, [pc, #324]	; (8005b54 <_svfiprintf_r+0x1ec>)
 8005a0e:	f000 fa43 	bl	8005e98 <memchr>
 8005a12:	9a04      	ldr	r2, [sp, #16]
 8005a14:	b9d8      	cbnz	r0, 8005a4e <_svfiprintf_r+0xe6>
 8005a16:	06d0      	lsls	r0, r2, #27
 8005a18:	bf44      	itt	mi
 8005a1a:	2320      	movmi	r3, #32
 8005a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a20:	0711      	lsls	r1, r2, #28
 8005a22:	bf44      	itt	mi
 8005a24:	232b      	movmi	r3, #43	; 0x2b
 8005a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a30:	d015      	beq.n	8005a5e <_svfiprintf_r+0xf6>
 8005a32:	4654      	mov	r4, sl
 8005a34:	2000      	movs	r0, #0
 8005a36:	f04f 0c0a 	mov.w	ip, #10
 8005a3a:	9a07      	ldr	r2, [sp, #28]
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a42:	3b30      	subs	r3, #48	; 0x30
 8005a44:	2b09      	cmp	r3, #9
 8005a46:	d94e      	bls.n	8005ae6 <_svfiprintf_r+0x17e>
 8005a48:	b1b0      	cbz	r0, 8005a78 <_svfiprintf_r+0x110>
 8005a4a:	9207      	str	r2, [sp, #28]
 8005a4c:	e014      	b.n	8005a78 <_svfiprintf_r+0x110>
 8005a4e:	eba0 0308 	sub.w	r3, r0, r8
 8005a52:	fa09 f303 	lsl.w	r3, r9, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	46a2      	mov	sl, r4
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	e7d2      	b.n	8005a04 <_svfiprintf_r+0x9c>
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	1d19      	adds	r1, r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	9103      	str	r1, [sp, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfbb      	ittet	lt
 8005a6a:	425b      	neglt	r3, r3
 8005a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a70:	9307      	strge	r3, [sp, #28]
 8005a72:	9307      	strlt	r3, [sp, #28]
 8005a74:	bfb8      	it	lt
 8005a76:	9204      	strlt	r2, [sp, #16]
 8005a78:	7823      	ldrb	r3, [r4, #0]
 8005a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a7c:	d10c      	bne.n	8005a98 <_svfiprintf_r+0x130>
 8005a7e:	7863      	ldrb	r3, [r4, #1]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d135      	bne.n	8005af0 <_svfiprintf_r+0x188>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	3402      	adds	r4, #2
 8005a88:	1d1a      	adds	r2, r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	9203      	str	r2, [sp, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfb8      	it	lt
 8005a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a96:	9305      	str	r3, [sp, #20]
 8005a98:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005b58 <_svfiprintf_r+0x1f0>
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	7821      	ldrb	r1, [r4, #0]
 8005aa2:	f000 f9f9 	bl	8005e98 <memchr>
 8005aa6:	b140      	cbz	r0, 8005aba <_svfiprintf_r+0x152>
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	eba0 000a 	sub.w	r0, r0, sl
 8005aae:	fa03 f000 	lsl.w	r0, r3, r0
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	3401      	adds	r4, #1
 8005ab6:	4303      	orrs	r3, r0
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005abe:	2206      	movs	r2, #6
 8005ac0:	4826      	ldr	r0, [pc, #152]	; (8005b5c <_svfiprintf_r+0x1f4>)
 8005ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ac6:	f000 f9e7 	bl	8005e98 <memchr>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d038      	beq.n	8005b40 <_svfiprintf_r+0x1d8>
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <_svfiprintf_r+0x1f8>)
 8005ad0:	bb1b      	cbnz	r3, 8005b1a <_svfiprintf_r+0x1b2>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	3307      	adds	r3, #7
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	3308      	adds	r3, #8
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	4433      	add	r3, r6
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	e767      	b.n	80059b6 <_svfiprintf_r+0x4e>
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	2001      	movs	r0, #1
 8005aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aee:	e7a5      	b.n	8005a3c <_svfiprintf_r+0xd4>
 8005af0:	2300      	movs	r3, #0
 8005af2:	f04f 0c0a 	mov.w	ip, #10
 8005af6:	4619      	mov	r1, r3
 8005af8:	3401      	adds	r4, #1
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	4620      	mov	r0, r4
 8005afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b02:	3a30      	subs	r2, #48	; 0x30
 8005b04:	2a09      	cmp	r2, #9
 8005b06:	d903      	bls.n	8005b10 <_svfiprintf_r+0x1a8>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0c5      	beq.n	8005a98 <_svfiprintf_r+0x130>
 8005b0c:	9105      	str	r1, [sp, #20]
 8005b0e:	e7c3      	b.n	8005a98 <_svfiprintf_r+0x130>
 8005b10:	4604      	mov	r4, r0
 8005b12:	2301      	movs	r3, #1
 8005b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b18:	e7f0      	b.n	8005afc <_svfiprintf_r+0x194>
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4638      	mov	r0, r7
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <_svfiprintf_r+0x1fc>)
 8005b24:	a904      	add	r1, sp, #16
 8005b26:	f3af 8000 	nop.w
 8005b2a:	1c42      	adds	r2, r0, #1
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	d1d6      	bne.n	8005ade <_svfiprintf_r+0x176>
 8005b30:	89ab      	ldrh	r3, [r5, #12]
 8005b32:	065b      	lsls	r3, r3, #25
 8005b34:	f53f af2c 	bmi.w	8005990 <_svfiprintf_r+0x28>
 8005b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b3a:	b01d      	add	sp, #116	; 0x74
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	ab03      	add	r3, sp, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4638      	mov	r0, r7
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <_svfiprintf_r+0x1fc>)
 8005b4a:	a904      	add	r1, sp, #16
 8005b4c:	f000 f87c 	bl	8005c48 <_printf_i>
 8005b50:	e7eb      	b.n	8005b2a <_svfiprintf_r+0x1c2>
 8005b52:	bf00      	nop
 8005b54:	080073bc 	.word	0x080073bc
 8005b58:	080073c2 	.word	0x080073c2
 8005b5c:	080073c6 	.word	0x080073c6
 8005b60:	00000000 	.word	0x00000000
 8005b64:	080058b1 	.word	0x080058b1

08005b68 <_printf_common>:
 8005b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	4699      	mov	r9, r3
 8005b70:	688a      	ldr	r2, [r1, #8]
 8005b72:	690b      	ldr	r3, [r1, #16]
 8005b74:	4607      	mov	r7, r0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfb8      	it	lt
 8005b7a:	4613      	movlt	r3, r2
 8005b7c:	6033      	str	r3, [r6, #0]
 8005b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b82:	460c      	mov	r4, r1
 8005b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b88:	b10a      	cbz	r2, 8005b8e <_printf_common+0x26>
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	0699      	lsls	r1, r3, #26
 8005b92:	bf42      	ittt	mi
 8005b94:	6833      	ldrmi	r3, [r6, #0]
 8005b96:	3302      	addmi	r3, #2
 8005b98:	6033      	strmi	r3, [r6, #0]
 8005b9a:	6825      	ldr	r5, [r4, #0]
 8005b9c:	f015 0506 	ands.w	r5, r5, #6
 8005ba0:	d106      	bne.n	8005bb0 <_printf_common+0x48>
 8005ba2:	f104 0a19 	add.w	sl, r4, #25
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	6832      	ldr	r2, [r6, #0]
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	42ab      	cmp	r3, r5
 8005bae:	dc28      	bgt.n	8005c02 <_printf_common+0x9a>
 8005bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bb4:	1e13      	subs	r3, r2, #0
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	bf18      	it	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	0692      	lsls	r2, r2, #26
 8005bbe:	d42d      	bmi.n	8005c1c <_printf_common+0xb4>
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc8:	47c0      	blx	r8
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d020      	beq.n	8005c10 <_printf_common+0xa8>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	68e5      	ldr	r5, [r4, #12]
 8005bd2:	f003 0306 	and.w	r3, r3, #6
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	bf18      	it	ne
 8005bda:	2500      	movne	r5, #0
 8005bdc:	6832      	ldr	r2, [r6, #0]
 8005bde:	f04f 0600 	mov.w	r6, #0
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	bf08      	it	eq
 8005be6:	1aad      	subeq	r5, r5, r2
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	bf08      	it	eq
 8005bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfc4      	itt	gt
 8005bf4:	1a9b      	subgt	r3, r3, r2
 8005bf6:	18ed      	addgt	r5, r5, r3
 8005bf8:	341a      	adds	r4, #26
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	d11a      	bne.n	8005c34 <_printf_common+0xcc>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e008      	b.n	8005c14 <_printf_common+0xac>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4652      	mov	r2, sl
 8005c06:	4649      	mov	r1, r9
 8005c08:	4638      	mov	r0, r7
 8005c0a:	47c0      	blx	r8
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d103      	bne.n	8005c18 <_printf_common+0xb0>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	3501      	adds	r5, #1
 8005c1a:	e7c4      	b.n	8005ba6 <_printf_common+0x3e>
 8005c1c:	2030      	movs	r0, #48	; 0x30
 8005c1e:	18e1      	adds	r1, r4, r3
 8005c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c2a:	4422      	add	r2, r4
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c32:	e7c5      	b.n	8005bc0 <_printf_common+0x58>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4622      	mov	r2, r4
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0e6      	beq.n	8005c10 <_printf_common+0xa8>
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7d9      	b.n	8005bfa <_printf_common+0x92>
	...

08005c48 <_printf_i>:
 8005c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	7e0f      	ldrb	r7, [r1, #24]
 8005c4e:	4691      	mov	r9, r2
 8005c50:	2f78      	cmp	r7, #120	; 0x78
 8005c52:	4680      	mov	r8, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	469a      	mov	sl, r3
 8005c58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c5e:	d807      	bhi.n	8005c70 <_printf_i+0x28>
 8005c60:	2f62      	cmp	r7, #98	; 0x62
 8005c62:	d80a      	bhi.n	8005c7a <_printf_i+0x32>
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	f000 80d9 	beq.w	8005e1c <_printf_i+0x1d4>
 8005c6a:	2f58      	cmp	r7, #88	; 0x58
 8005c6c:	f000 80a4 	beq.w	8005db8 <_printf_i+0x170>
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c78:	e03a      	b.n	8005cf0 <_printf_i+0xa8>
 8005c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c7e:	2b15      	cmp	r3, #21
 8005c80:	d8f6      	bhi.n	8005c70 <_printf_i+0x28>
 8005c82:	a101      	add	r1, pc, #4	; (adr r1, 8005c88 <_printf_i+0x40>)
 8005c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005c71 	.word	0x08005c71
 8005c94:	08005c71 	.word	0x08005c71
 8005c98:	08005c71 	.word	0x08005c71
 8005c9c:	08005c71 	.word	0x08005c71
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005c71 	.word	0x08005c71
 8005ca8:	08005c71 	.word	0x08005c71
 8005cac:	08005c71 	.word	0x08005c71
 8005cb0:	08005c71 	.word	0x08005c71
 8005cb4:	08005e03 	.word	0x08005e03
 8005cb8:	08005d25 	.word	0x08005d25
 8005cbc:	08005de5 	.word	0x08005de5
 8005cc0:	08005c71 	.word	0x08005c71
 8005cc4:	08005c71 	.word	0x08005c71
 8005cc8:	08005e25 	.word	0x08005e25
 8005ccc:	08005c71 	.word	0x08005c71
 8005cd0:	08005d25 	.word	0x08005d25
 8005cd4:	08005c71 	.word	0x08005c71
 8005cd8:	08005c71 	.word	0x08005c71
 8005cdc:	08005ded 	.word	0x08005ded
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	602a      	str	r2, [r5, #0]
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0a4      	b.n	8005e3e <_printf_i+0x1f6>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	6829      	ldr	r1, [r5, #0]
 8005cf8:	0606      	lsls	r6, r0, #24
 8005cfa:	f101 0304 	add.w	r3, r1, #4
 8005cfe:	d50a      	bpl.n	8005d16 <_printf_i+0xce>
 8005d00:	680e      	ldr	r6, [r1, #0]
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	da03      	bge.n	8005d10 <_printf_i+0xc8>
 8005d08:	232d      	movs	r3, #45	; 0x2d
 8005d0a:	4276      	negs	r6, r6
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d10:	230a      	movs	r3, #10
 8005d12:	485e      	ldr	r0, [pc, #376]	; (8005e8c <_printf_i+0x244>)
 8005d14:	e019      	b.n	8005d4a <_printf_i+0x102>
 8005d16:	680e      	ldr	r6, [r1, #0]
 8005d18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	bf18      	it	ne
 8005d20:	b236      	sxthne	r6, r6
 8005d22:	e7ef      	b.n	8005d04 <_printf_i+0xbc>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	6820      	ldr	r0, [r4, #0]
 8005d28:	1d19      	adds	r1, r3, #4
 8005d2a:	6029      	str	r1, [r5, #0]
 8005d2c:	0601      	lsls	r1, r0, #24
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0xec>
 8005d30:	681e      	ldr	r6, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0xf2>
 8005d34:	0646      	lsls	r6, r0, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0xe8>
 8005d38:	881e      	ldrh	r6, [r3, #0]
 8005d3a:	2f6f      	cmp	r7, #111	; 0x6f
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2308      	moveq	r3, #8
 8005d40:	230a      	movne	r3, #10
 8005d42:	4852      	ldr	r0, [pc, #328]	; (8005e8c <_printf_i+0x244>)
 8005d44:	2100      	movs	r1, #0
 8005d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d4a:	6865      	ldr	r5, [r4, #4]
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	bfa8      	it	ge
 8005d50:	6821      	ldrge	r1, [r4, #0]
 8005d52:	60a5      	str	r5, [r4, #8]
 8005d54:	bfa4      	itt	ge
 8005d56:	f021 0104 	bicge.w	r1, r1, #4
 8005d5a:	6021      	strge	r1, [r4, #0]
 8005d5c:	b90e      	cbnz	r6, 8005d62 <_printf_i+0x11a>
 8005d5e:	2d00      	cmp	r5, #0
 8005d60:	d04d      	beq.n	8005dfe <_printf_i+0x1b6>
 8005d62:	4615      	mov	r5, r2
 8005d64:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d68:	fb03 6711 	mls	r7, r3, r1, r6
 8005d6c:	5dc7      	ldrb	r7, [r0, r7]
 8005d6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d72:	4637      	mov	r7, r6
 8005d74:	42bb      	cmp	r3, r7
 8005d76:	460e      	mov	r6, r1
 8005d78:	d9f4      	bls.n	8005d64 <_printf_i+0x11c>
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d10b      	bne.n	8005d96 <_printf_i+0x14e>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	07de      	lsls	r6, r3, #31
 8005d82:	d508      	bpl.n	8005d96 <_printf_i+0x14e>
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	6861      	ldr	r1, [r4, #4]
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	bfde      	ittt	le
 8005d8c:	2330      	movle	r3, #48	; 0x30
 8005d8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d96:	1b52      	subs	r2, r2, r5
 8005d98:	6122      	str	r2, [r4, #16]
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4640      	mov	r0, r8
 8005da0:	f8cd a000 	str.w	sl, [sp]
 8005da4:	aa03      	add	r2, sp, #12
 8005da6:	f7ff fedf 	bl	8005b68 <_printf_common>
 8005daa:	3001      	adds	r0, #1
 8005dac:	d14c      	bne.n	8005e48 <_printf_i+0x200>
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	b004      	add	sp, #16
 8005db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db8:	4834      	ldr	r0, [pc, #208]	; (8005e8c <_printf_i+0x244>)
 8005dba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dbe:	6829      	ldr	r1, [r5, #0]
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dc6:	6029      	str	r1, [r5, #0]
 8005dc8:	061d      	lsls	r5, r3, #24
 8005dca:	d514      	bpl.n	8005df6 <_printf_i+0x1ae>
 8005dcc:	07df      	lsls	r7, r3, #31
 8005dce:	bf44      	itt	mi
 8005dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8005dd4:	6023      	strmi	r3, [r4, #0]
 8005dd6:	b91e      	cbnz	r6, 8005de0 <_printf_i+0x198>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	2310      	movs	r3, #16
 8005de2:	e7af      	b.n	8005d44 <_printf_i+0xfc>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	f043 0320 	orr.w	r3, r3, #32
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	2378      	movs	r3, #120	; 0x78
 8005dee:	4828      	ldr	r0, [pc, #160]	; (8005e90 <_printf_i+0x248>)
 8005df0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005df4:	e7e3      	b.n	8005dbe <_printf_i+0x176>
 8005df6:	0659      	lsls	r1, r3, #25
 8005df8:	bf48      	it	mi
 8005dfa:	b2b6      	uxthmi	r6, r6
 8005dfc:	e7e6      	b.n	8005dcc <_printf_i+0x184>
 8005dfe:	4615      	mov	r5, r2
 8005e00:	e7bb      	b.n	8005d7a <_printf_i+0x132>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	6826      	ldr	r6, [r4, #0]
 8005e06:	1d18      	adds	r0, r3, #4
 8005e08:	6961      	ldr	r1, [r4, #20]
 8005e0a:	6028      	str	r0, [r5, #0]
 8005e0c:	0635      	lsls	r5, r6, #24
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0x1ce>
 8005e12:	6019      	str	r1, [r3, #0]
 8005e14:	e002      	b.n	8005e1c <_printf_i+0x1d4>
 8005e16:	0670      	lsls	r0, r6, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0x1ca>
 8005e1a:	8019      	strh	r1, [r3, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4615      	mov	r5, r2
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	e7ba      	b.n	8005d9a <_printf_i+0x152>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	2100      	movs	r1, #0
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	6862      	ldr	r2, [r4, #4]
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f831 	bl	8005e98 <memchr>
 8005e36:	b108      	cbz	r0, 8005e3c <_printf_i+0x1f4>
 8005e38:	1b40      	subs	r0, r0, r5
 8005e3a:	6060      	str	r0, [r4, #4]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2300      	movs	r3, #0
 8005e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e46:	e7a8      	b.n	8005d9a <_printf_i+0x152>
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	47d0      	blx	sl
 8005e52:	3001      	adds	r0, #1
 8005e54:	d0ab      	beq.n	8005dae <_printf_i+0x166>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	079b      	lsls	r3, r3, #30
 8005e5a:	d413      	bmi.n	8005e84 <_printf_i+0x23c>
 8005e5c:	68e0      	ldr	r0, [r4, #12]
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	4298      	cmp	r0, r3
 8005e62:	bfb8      	it	lt
 8005e64:	4618      	movlt	r0, r3
 8005e66:	e7a4      	b.n	8005db2 <_printf_i+0x16a>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4640      	mov	r0, r8
 8005e70:	47d0      	blx	sl
 8005e72:	3001      	adds	r0, #1
 8005e74:	d09b      	beq.n	8005dae <_printf_i+0x166>
 8005e76:	3501      	adds	r5, #1
 8005e78:	68e3      	ldr	r3, [r4, #12]
 8005e7a:	9903      	ldr	r1, [sp, #12]
 8005e7c:	1a5b      	subs	r3, r3, r1
 8005e7e:	42ab      	cmp	r3, r5
 8005e80:	dcf2      	bgt.n	8005e68 <_printf_i+0x220>
 8005e82:	e7eb      	b.n	8005e5c <_printf_i+0x214>
 8005e84:	2500      	movs	r5, #0
 8005e86:	f104 0619 	add.w	r6, r4, #25
 8005e8a:	e7f5      	b.n	8005e78 <_printf_i+0x230>
 8005e8c:	080073cd 	.word	0x080073cd
 8005e90:	080073de 	.word	0x080073de

08005e94 <__retarget_lock_acquire_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <__retarget_lock_release_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <memchr>:
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	b2c9      	uxtb	r1, r1
 8005e9e:	4402      	add	r2, r0
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	d101      	bne.n	8005eaa <memchr+0x12>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e003      	b.n	8005eb2 <memchr+0x1a>
 8005eaa:	7804      	ldrb	r4, [r0, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	428c      	cmp	r4, r1
 8005eb0:	d1f6      	bne.n	8005ea0 <memchr+0x8>
 8005eb2:	bd10      	pop	{r4, pc}

08005eb4 <memcpy>:
 8005eb4:	440a      	add	r2, r1
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ebc:	d100      	bne.n	8005ec0 <memcpy+0xc>
 8005ebe:	4770      	bx	lr
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec6:	4291      	cmp	r1, r2
 8005ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ecc:	d1f9      	bne.n	8005ec2 <memcpy+0xe>
 8005ece:	bd10      	pop	{r4, pc}

08005ed0 <memmove>:
 8005ed0:	4288      	cmp	r0, r1
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	eb01 0402 	add.w	r4, r1, r2
 8005ed8:	d902      	bls.n	8005ee0 <memmove+0x10>
 8005eda:	4284      	cmp	r4, r0
 8005edc:	4623      	mov	r3, r4
 8005ede:	d807      	bhi.n	8005ef0 <memmove+0x20>
 8005ee0:	1e43      	subs	r3, r0, #1
 8005ee2:	42a1      	cmp	r1, r4
 8005ee4:	d008      	beq.n	8005ef8 <memmove+0x28>
 8005ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eee:	e7f8      	b.n	8005ee2 <memmove+0x12>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4402      	add	r2, r0
 8005ef4:	428a      	cmp	r2, r1
 8005ef6:	d100      	bne.n	8005efa <memmove+0x2a>
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f02:	e7f7      	b.n	8005ef4 <memmove+0x24>

08005f04 <_realloc_r>:
 8005f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f08:	4680      	mov	r8, r0
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	460e      	mov	r6, r1
 8005f0e:	b921      	cbnz	r1, 8005f1a <_realloc_r+0x16>
 8005f10:	4611      	mov	r1, r2
 8005f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	f7ff bc03 	b.w	8005720 <_malloc_r>
 8005f1a:	b92a      	cbnz	r2, 8005f28 <_realloc_r+0x24>
 8005f1c:	f7ff fb98 	bl	8005650 <_free_r>
 8005f20:	4625      	mov	r5, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f28:	f000 f81b 	bl	8005f62 <_malloc_usable_size_r>
 8005f2c:	4284      	cmp	r4, r0
 8005f2e:	4607      	mov	r7, r0
 8005f30:	d802      	bhi.n	8005f38 <_realloc_r+0x34>
 8005f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f36:	d812      	bhi.n	8005f5e <_realloc_r+0x5a>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f7ff fbf0 	bl	8005720 <_malloc_r>
 8005f40:	4605      	mov	r5, r0
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0ed      	beq.n	8005f22 <_realloc_r+0x1e>
 8005f46:	42bc      	cmp	r4, r7
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	bf28      	it	cs
 8005f4e:	463a      	movcs	r2, r7
 8005f50:	f7ff ffb0 	bl	8005eb4 <memcpy>
 8005f54:	4631      	mov	r1, r6
 8005f56:	4640      	mov	r0, r8
 8005f58:	f7ff fb7a 	bl	8005650 <_free_r>
 8005f5c:	e7e1      	b.n	8005f22 <_realloc_r+0x1e>
 8005f5e:	4635      	mov	r5, r6
 8005f60:	e7df      	b.n	8005f22 <_realloc_r+0x1e>

08005f62 <_malloc_usable_size_r>:
 8005f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f66:	1f18      	subs	r0, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfbc      	itt	lt
 8005f6c:	580b      	ldrlt	r3, [r1, r0]
 8005f6e:	18c0      	addlt	r0, r0, r3
 8005f70:	4770      	bx	lr
 8005f72:	0000      	movs	r0, r0
 8005f74:	0000      	movs	r0, r0
	...

08005f78 <atan>:
 8005f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	4bb6      	ldr	r3, [pc, #728]	; (8006258 <atan+0x2e0>)
 8005f7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f82:	429e      	cmp	r6, r3
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	468b      	mov	fp, r1
 8005f8a:	dd17      	ble.n	8005fbc <atan+0x44>
 8005f8c:	4bb3      	ldr	r3, [pc, #716]	; (800625c <atan+0x2e4>)
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	dc01      	bgt.n	8005f96 <atan+0x1e>
 8005f92:	d109      	bne.n	8005fa8 <atan+0x30>
 8005f94:	b140      	cbz	r0, 8005fa8 <atan+0x30>
 8005f96:	4622      	mov	r2, r4
 8005f98:	462b      	mov	r3, r5
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f7fa f8e5 	bl	800016c <__adddf3>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	e005      	b.n	8005fb4 <atan+0x3c>
 8005fa8:	f1bb 0f00 	cmp.w	fp, #0
 8005fac:	4cac      	ldr	r4, [pc, #688]	; (8006260 <atan+0x2e8>)
 8005fae:	f300 8121 	bgt.w	80061f4 <atan+0x27c>
 8005fb2:	4dac      	ldr	r5, [pc, #688]	; (8006264 <atan+0x2ec>)
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4baa      	ldr	r3, [pc, #680]	; (8006268 <atan+0x2f0>)
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	dc11      	bgt.n	8005fe6 <atan+0x6e>
 8005fc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005fc6:	429e      	cmp	r6, r3
 8005fc8:	dc0a      	bgt.n	8005fe0 <atan+0x68>
 8005fca:	a38b      	add	r3, pc, #556	; (adr r3, 80061f8 <atan+0x280>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f8cc 	bl	800016c <__adddf3>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4ba5      	ldr	r3, [pc, #660]	; (800626c <atan+0x2f4>)
 8005fd8:	f7fa fd0e 	bl	80009f8 <__aeabi_dcmpgt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1e9      	bne.n	8005fb4 <atan+0x3c>
 8005fe0:	f04f 3aff 	mov.w	sl, #4294967295
 8005fe4:	e027      	b.n	8006036 <atan+0xbe>
 8005fe6:	f000 f951 	bl	800628c <fabs>
 8005fea:	4ba1      	ldr	r3, [pc, #644]	; (8006270 <atan+0x2f8>)
 8005fec:	4604      	mov	r4, r0
 8005fee:	429e      	cmp	r6, r3
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	f300 80b8 	bgt.w	8006166 <atan+0x1ee>
 8005ff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005ffa:	429e      	cmp	r6, r3
 8005ffc:	f300 809c 	bgt.w	8006138 <atan+0x1c0>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	f7fa f8b2 	bl	800016c <__adddf3>
 8006008:	2200      	movs	r2, #0
 800600a:	4b98      	ldr	r3, [pc, #608]	; (800626c <atan+0x2f4>)
 800600c:	f7fa f8ac 	bl	8000168 <__aeabi_dsub>
 8006010:	2200      	movs	r2, #0
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa f8a5 	bl	800016c <__adddf3>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4630      	mov	r0, r6
 8006028:	4639      	mov	r1, r7
 800602a:	f7fa fb7f 	bl	800072c <__aeabi_ddiv>
 800602e:	f04f 0a00 	mov.w	sl, #0
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fa fa4b 	bl	80004d8 <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4680      	mov	r8, r0
 8006048:	4689      	mov	r9, r1
 800604a:	f7fa fa45 	bl	80004d8 <__aeabi_dmul>
 800604e:	a36c      	add	r3, pc, #432	; (adr r3, 8006200 <atan+0x288>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	f7fa fa3e 	bl	80004d8 <__aeabi_dmul>
 800605c:	a36a      	add	r3, pc, #424	; (adr r3, 8006208 <atan+0x290>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa f883 	bl	800016c <__adddf3>
 8006066:	4632      	mov	r2, r6
 8006068:	463b      	mov	r3, r7
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	a368      	add	r3, pc, #416	; (adr r3, 8006210 <atan+0x298>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa f87a 	bl	800016c <__adddf3>
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa fa2c 	bl	80004d8 <__aeabi_dmul>
 8006080:	a365      	add	r3, pc, #404	; (adr r3, 8006218 <atan+0x2a0>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f7fa f871 	bl	800016c <__adddf3>
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	f7fa fa23 	bl	80004d8 <__aeabi_dmul>
 8006092:	a363      	add	r3, pc, #396	; (adr r3, 8006220 <atan+0x2a8>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa f868 	bl	800016c <__adddf3>
 800609c:	4632      	mov	r2, r6
 800609e:	463b      	mov	r3, r7
 80060a0:	f7fa fa1a 	bl	80004d8 <__aeabi_dmul>
 80060a4:	a360      	add	r3, pc, #384	; (adr r3, 8006228 <atan+0x2b0>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f7fa f85f 	bl	800016c <__adddf3>
 80060ae:	4642      	mov	r2, r8
 80060b0:	464b      	mov	r3, r9
 80060b2:	f7fa fa11 	bl	80004d8 <__aeabi_dmul>
 80060b6:	a35e      	add	r3, pc, #376	; (adr r3, 8006230 <atan+0x2b8>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	4680      	mov	r8, r0
 80060be:	4689      	mov	r9, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa fa08 	bl	80004d8 <__aeabi_dmul>
 80060c8:	a35b      	add	r3, pc, #364	; (adr r3, 8006238 <atan+0x2c0>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa f84b 	bl	8000168 <__aeabi_dsub>
 80060d2:	4632      	mov	r2, r6
 80060d4:	463b      	mov	r3, r7
 80060d6:	f7fa f9ff 	bl	80004d8 <__aeabi_dmul>
 80060da:	a359      	add	r3, pc, #356	; (adr r3, 8006240 <atan+0x2c8>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	4632      	mov	r2, r6
 80060e6:	463b      	mov	r3, r7
 80060e8:	f7fa f9f6 	bl	80004d8 <__aeabi_dmul>
 80060ec:	a356      	add	r3, pc, #344	; (adr r3, 8006248 <atan+0x2d0>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f839 	bl	8000168 <__aeabi_dsub>
 80060f6:	4632      	mov	r2, r6
 80060f8:	463b      	mov	r3, r7
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	a354      	add	r3, pc, #336	; (adr r3, 8006250 <atan+0x2d8>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa f830 	bl	8000168 <__aeabi_dsub>
 8006108:	4632      	mov	r2, r6
 800610a:	463b      	mov	r3, r7
 800610c:	f7fa f9e4 	bl	80004d8 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4640      	mov	r0, r8
 8006116:	4649      	mov	r1, r9
 8006118:	f7fa f828 	bl	800016c <__adddf3>
 800611c:	4622      	mov	r2, r4
 800611e:	462b      	mov	r3, r5
 8006120:	f7fa f9da 	bl	80004d8 <__aeabi_dmul>
 8006124:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	d144      	bne.n	80061b8 <atan+0x240>
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa f819 	bl	8000168 <__aeabi_dsub>
 8006136:	e734      	b.n	8005fa2 <atan+0x2a>
 8006138:	2200      	movs	r2, #0
 800613a:	4b4c      	ldr	r3, [pc, #304]	; (800626c <atan+0x2f4>)
 800613c:	f7fa f814 	bl	8000168 <__aeabi_dsub>
 8006140:	2200      	movs	r2, #0
 8006142:	4606      	mov	r6, r0
 8006144:	460f      	mov	r7, r1
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	4b48      	ldr	r3, [pc, #288]	; (800626c <atan+0x2f4>)
 800614c:	f7fa f80e 	bl	800016c <__adddf3>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	f7fa fae8 	bl	800072c <__aeabi_ddiv>
 800615c:	f04f 0a01 	mov.w	sl, #1
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	e767      	b.n	8006036 <atan+0xbe>
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <atan+0x2fc>)
 8006168:	429e      	cmp	r6, r3
 800616a:	da1a      	bge.n	80061a2 <atan+0x22a>
 800616c:	2200      	movs	r2, #0
 800616e:	4b42      	ldr	r3, [pc, #264]	; (8006278 <atan+0x300>)
 8006170:	f7f9 fffa 	bl	8000168 <__aeabi_dsub>
 8006174:	2200      	movs	r2, #0
 8006176:	4606      	mov	r6, r0
 8006178:	460f      	mov	r7, r1
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	4b3e      	ldr	r3, [pc, #248]	; (8006278 <atan+0x300>)
 8006180:	f7fa f9aa 	bl	80004d8 <__aeabi_dmul>
 8006184:	2200      	movs	r2, #0
 8006186:	4b39      	ldr	r3, [pc, #228]	; (800626c <atan+0x2f4>)
 8006188:	f7f9 fff0 	bl	800016c <__adddf3>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f7fa faca 	bl	800072c <__aeabi_ddiv>
 8006198:	f04f 0a02 	mov.w	sl, #2
 800619c:	4604      	mov	r4, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	e749      	b.n	8006036 <atan+0xbe>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	2000      	movs	r0, #0
 80061a8:	4934      	ldr	r1, [pc, #208]	; (800627c <atan+0x304>)
 80061aa:	f7fa fabf 	bl	800072c <__aeabi_ddiv>
 80061ae:	f04f 0a03 	mov.w	sl, #3
 80061b2:	4604      	mov	r4, r0
 80061b4:	460d      	mov	r5, r1
 80061b6:	e73e      	b.n	8006036 <atan+0xbe>
 80061b8:	4b31      	ldr	r3, [pc, #196]	; (8006280 <atan+0x308>)
 80061ba:	4e32      	ldr	r6, [pc, #200]	; (8006284 <atan+0x30c>)
 80061bc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80061c0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80061c4:	e9da 2300 	ldrd	r2, r3, [sl]
 80061c8:	f7f9 ffce 	bl	8000168 <__aeabi_dsub>
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	f7f9 ffca 	bl	8000168 <__aeabi_dsub>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80061dc:	f7f9 ffc4 	bl	8000168 <__aeabi_dsub>
 80061e0:	f1bb 0f00 	cmp.w	fp, #0
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	f6bf aee4 	bge.w	8005fb4 <atan+0x3c>
 80061ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061f0:	461d      	mov	r5, r3
 80061f2:	e6df      	b.n	8005fb4 <atan+0x3c>
 80061f4:	4d24      	ldr	r5, [pc, #144]	; (8006288 <atan+0x310>)
 80061f6:	e6dd      	b.n	8005fb4 <atan+0x3c>
 80061f8:	8800759c 	.word	0x8800759c
 80061fc:	7e37e43c 	.word	0x7e37e43c
 8006200:	e322da11 	.word	0xe322da11
 8006204:	3f90ad3a 	.word	0x3f90ad3a
 8006208:	24760deb 	.word	0x24760deb
 800620c:	3fa97b4b 	.word	0x3fa97b4b
 8006210:	a0d03d51 	.word	0xa0d03d51
 8006214:	3fb10d66 	.word	0x3fb10d66
 8006218:	c54c206e 	.word	0xc54c206e
 800621c:	3fb745cd 	.word	0x3fb745cd
 8006220:	920083ff 	.word	0x920083ff
 8006224:	3fc24924 	.word	0x3fc24924
 8006228:	5555550d 	.word	0x5555550d
 800622c:	3fd55555 	.word	0x3fd55555
 8006230:	2c6a6c2f 	.word	0x2c6a6c2f
 8006234:	bfa2b444 	.word	0xbfa2b444
 8006238:	52defd9a 	.word	0x52defd9a
 800623c:	3fadde2d 	.word	0x3fadde2d
 8006240:	af749a6d 	.word	0xaf749a6d
 8006244:	3fb3b0f2 	.word	0x3fb3b0f2
 8006248:	fe231671 	.word	0xfe231671
 800624c:	3fbc71c6 	.word	0x3fbc71c6
 8006250:	9998ebc4 	.word	0x9998ebc4
 8006254:	3fc99999 	.word	0x3fc99999
 8006258:	440fffff 	.word	0x440fffff
 800625c:	7ff00000 	.word	0x7ff00000
 8006260:	54442d18 	.word	0x54442d18
 8006264:	bff921fb 	.word	0xbff921fb
 8006268:	3fdbffff 	.word	0x3fdbffff
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	3ff2ffff 	.word	0x3ff2ffff
 8006274:	40038000 	.word	0x40038000
 8006278:	3ff80000 	.word	0x3ff80000
 800627c:	bff00000 	.word	0xbff00000
 8006280:	08007410 	.word	0x08007410
 8006284:	080073f0 	.word	0x080073f0
 8006288:	3ff921fb 	.word	0x3ff921fb

0800628c <fabs>:
 800628c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006290:	4770      	bx	lr

08006292 <atan2>:
 8006292:	f000 b825 	b.w	80062e0 <__ieee754_atan2>

08006296 <sqrt>:
 8006296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006298:	4606      	mov	r6, r0
 800629a:	460f      	mov	r7, r1
 800629c:	f000 f8f2 	bl	8006484 <__ieee754_sqrt>
 80062a0:	4632      	mov	r2, r6
 80062a2:	4604      	mov	r4, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	463b      	mov	r3, r7
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7fa fbae 	bl	8000a0c <__aeabi_dcmpun>
 80062b0:	b990      	cbnz	r0, 80062d8 <sqrt+0x42>
 80062b2:	2200      	movs	r2, #0
 80062b4:	2300      	movs	r3, #0
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fb7f 	bl	80009bc <__aeabi_dcmplt>
 80062be:	b158      	cbz	r0, 80062d8 <sqrt+0x42>
 80062c0:	f7ff f984 	bl	80055cc <__errno>
 80062c4:	2321      	movs	r3, #33	; 0x21
 80062c6:	2200      	movs	r2, #0
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	4610      	mov	r0, r2
 80062ce:	4619      	mov	r1, r3
 80062d0:	f7fa fa2c 	bl	800072c <__aeabi_ddiv>
 80062d4:	4604      	mov	r4, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	4620      	mov	r0, r4
 80062da:	4629      	mov	r1, r5
 80062dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062e0 <__ieee754_atan2>:
 80062e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4692      	mov	sl, r2
 80062e6:	4699      	mov	r9, r3
 80062e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062ec:	461f      	mov	r7, r3
 80062ee:	f1ca 0300 	rsb	r3, sl, #0
 80062f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006478 <__ieee754_atan2+0x198>
 80062f6:	ea43 030a 	orr.w	r3, r3, sl
 80062fa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80062fe:	4573      	cmp	r3, lr
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
 8006304:	d808      	bhi.n	8006318 <__ieee754_atan2+0x38>
 8006306:	4246      	negs	r6, r0
 8006308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800630c:	4306      	orrs	r6, r0
 800630e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006312:	4576      	cmp	r6, lr
 8006314:	468c      	mov	ip, r1
 8006316:	d908      	bls.n	800632a <__ieee754_atan2+0x4a>
 8006318:	4652      	mov	r2, sl
 800631a:	464b      	mov	r3, r9
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7f9 ff24 	bl	800016c <__adddf3>
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	e019      	b.n	800635e <__ieee754_atan2+0x7e>
 800632a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800632e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006332:	ea56 060a 	orrs.w	r6, r6, sl
 8006336:	d103      	bne.n	8006340 <__ieee754_atan2+0x60>
 8006338:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	f7ff be1c 	b.w	8005f78 <atan>
 8006340:	17be      	asrs	r6, r7, #30
 8006342:	f006 0602 	and.w	r6, r6, #2
 8006346:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800634a:	ea53 0100 	orrs.w	r1, r3, r0
 800634e:	d10a      	bne.n	8006366 <__ieee754_atan2+0x86>
 8006350:	2e02      	cmp	r6, #2
 8006352:	d067      	beq.n	8006424 <__ieee754_atan2+0x144>
 8006354:	2e03      	cmp	r6, #3
 8006356:	d102      	bne.n	800635e <__ieee754_atan2+0x7e>
 8006358:	a53b      	add	r5, pc, #236	; (adr r5, 8006448 <__ieee754_atan2+0x168>)
 800635a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006366:	ea52 010a 	orrs.w	r1, r2, sl
 800636a:	d106      	bne.n	800637a <__ieee754_atan2+0x9a>
 800636c:	f1bc 0f00 	cmp.w	ip, #0
 8006370:	da63      	bge.n	800643a <__ieee754_atan2+0x15a>
 8006372:	a537      	add	r5, pc, #220	; (adr r5, 8006450 <__ieee754_atan2+0x170>)
 8006374:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006378:	e7f1      	b.n	800635e <__ieee754_atan2+0x7e>
 800637a:	4572      	cmp	r2, lr
 800637c:	d10f      	bne.n	800639e <__ieee754_atan2+0xbe>
 800637e:	4293      	cmp	r3, r2
 8006380:	f106 36ff 	add.w	r6, r6, #4294967295
 8006384:	d107      	bne.n	8006396 <__ieee754_atan2+0xb6>
 8006386:	2e02      	cmp	r6, #2
 8006388:	d850      	bhi.n	800642c <__ieee754_atan2+0x14c>
 800638a:	4b3c      	ldr	r3, [pc, #240]	; (800647c <__ieee754_atan2+0x19c>)
 800638c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006390:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006394:	e7e3      	b.n	800635e <__ieee754_atan2+0x7e>
 8006396:	2e02      	cmp	r6, #2
 8006398:	d84c      	bhi.n	8006434 <__ieee754_atan2+0x154>
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <__ieee754_atan2+0x1a0>)
 800639c:	e7f6      	b.n	800638c <__ieee754_atan2+0xac>
 800639e:	4573      	cmp	r3, lr
 80063a0:	d0e4      	beq.n	800636c <__ieee754_atan2+0x8c>
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80063a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063ac:	da20      	bge.n	80063f0 <__ieee754_atan2+0x110>
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	da01      	bge.n	80063b6 <__ieee754_atan2+0xd6>
 80063b2:	323c      	adds	r2, #60	; 0x3c
 80063b4:	db20      	blt.n	80063f8 <__ieee754_atan2+0x118>
 80063b6:	4652      	mov	r2, sl
 80063b8:	464b      	mov	r3, r9
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7fa f9b5 	bl	800072c <__aeabi_ddiv>
 80063c2:	f7ff ff63 	bl	800628c <fabs>
 80063c6:	f7ff fdd7 	bl	8005f78 <atan>
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	2e01      	cmp	r6, #1
 80063d0:	d015      	beq.n	80063fe <__ieee754_atan2+0x11e>
 80063d2:	2e02      	cmp	r6, #2
 80063d4:	d017      	beq.n	8006406 <__ieee754_atan2+0x126>
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	d0c1      	beq.n	800635e <__ieee754_atan2+0x7e>
 80063da:	a31f      	add	r3, pc, #124	; (adr r3, 8006458 <__ieee754_atan2+0x178>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	a31d      	add	r3, pc, #116	; (adr r3, 8006460 <__ieee754_atan2+0x180>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	e016      	b.n	800641e <__ieee754_atan2+0x13e>
 80063f0:	a51d      	add	r5, pc, #116	; (adr r5, 8006468 <__ieee754_atan2+0x188>)
 80063f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063f6:	e7ea      	b.n	80063ce <__ieee754_atan2+0xee>
 80063f8:	2400      	movs	r4, #0
 80063fa:	2500      	movs	r5, #0
 80063fc:	e7e7      	b.n	80063ce <__ieee754_atan2+0xee>
 80063fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006402:	461d      	mov	r5, r3
 8006404:	e7ab      	b.n	800635e <__ieee754_atan2+0x7e>
 8006406:	a314      	add	r3, pc, #80	; (adr r3, 8006458 <__ieee754_atan2+0x178>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	4620      	mov	r0, r4
 800640e:	4629      	mov	r1, r5
 8006410:	f7f9 feaa 	bl	8000168 <__aeabi_dsub>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	a111      	add	r1, pc, #68	; (adr r1, 8006460 <__ieee754_atan2+0x180>)
 800641a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800641e:	f7f9 fea3 	bl	8000168 <__aeabi_dsub>
 8006422:	e77f      	b.n	8006324 <__ieee754_atan2+0x44>
 8006424:	a50e      	add	r5, pc, #56	; (adr r5, 8006460 <__ieee754_atan2+0x180>)
 8006426:	e9d5 4500 	ldrd	r4, r5, [r5]
 800642a:	e798      	b.n	800635e <__ieee754_atan2+0x7e>
 800642c:	a510      	add	r5, pc, #64	; (adr r5, 8006470 <__ieee754_atan2+0x190>)
 800642e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006432:	e794      	b.n	800635e <__ieee754_atan2+0x7e>
 8006434:	2400      	movs	r4, #0
 8006436:	2500      	movs	r5, #0
 8006438:	e791      	b.n	800635e <__ieee754_atan2+0x7e>
 800643a:	a50b      	add	r5, pc, #44	; (adr r5, 8006468 <__ieee754_atan2+0x188>)
 800643c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006440:	e78d      	b.n	800635e <__ieee754_atan2+0x7e>
 8006442:	bf00      	nop
 8006444:	f3af 8000 	nop.w
 8006448:	54442d18 	.word	0x54442d18
 800644c:	c00921fb 	.word	0xc00921fb
 8006450:	54442d18 	.word	0x54442d18
 8006454:	bff921fb 	.word	0xbff921fb
 8006458:	33145c07 	.word	0x33145c07
 800645c:	3ca1a626 	.word	0x3ca1a626
 8006460:	54442d18 	.word	0x54442d18
 8006464:	400921fb 	.word	0x400921fb
 8006468:	54442d18 	.word	0x54442d18
 800646c:	3ff921fb 	.word	0x3ff921fb
 8006470:	54442d18 	.word	0x54442d18
 8006474:	3fe921fb 	.word	0x3fe921fb
 8006478:	7ff00000 	.word	0x7ff00000
 800647c:	08007430 	.word	0x08007430
 8006480:	08007448 	.word	0x08007448

08006484 <__ieee754_sqrt>:
 8006484:	f8df c158 	ldr.w	ip, [pc, #344]	; 80065e0 <__ieee754_sqrt+0x15c>
 8006488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006490:	4606      	mov	r6, r0
 8006492:	460d      	mov	r5, r1
 8006494:	460c      	mov	r4, r1
 8006496:	460a      	mov	r2, r1
 8006498:	4607      	mov	r7, r0
 800649a:	4603      	mov	r3, r0
 800649c:	d10f      	bne.n	80064be <__ieee754_sqrt+0x3a>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	f7fa f819 	bl	80004d8 <__aeabi_dmul>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4630      	mov	r0, r6
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7f9 fe5d 	bl	800016c <__adddf3>
 80064b2:	4606      	mov	r6, r0
 80064b4:	460d      	mov	r5, r1
 80064b6:	4630      	mov	r0, r6
 80064b8:	4629      	mov	r1, r5
 80064ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064be:	2900      	cmp	r1, #0
 80064c0:	dc0e      	bgt.n	80064e0 <__ieee754_sqrt+0x5c>
 80064c2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80064c6:	ea5c 0707 	orrs.w	r7, ip, r7
 80064ca:	d0f4      	beq.n	80064b6 <__ieee754_sqrt+0x32>
 80064cc:	b141      	cbz	r1, 80064e0 <__ieee754_sqrt+0x5c>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	f7f9 fe49 	bl	8000168 <__aeabi_dsub>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	f7fa f927 	bl	800072c <__aeabi_ddiv>
 80064de:	e7e8      	b.n	80064b2 <__ieee754_sqrt+0x2e>
 80064e0:	1521      	asrs	r1, r4, #20
 80064e2:	d075      	beq.n	80065d0 <__ieee754_sqrt+0x14c>
 80064e4:	07cc      	lsls	r4, r1, #31
 80064e6:	f04f 0400 	mov.w	r4, #0
 80064ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80064ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80064f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064f6:	bf5e      	ittt	pl
 80064f8:	0fd9      	lsrpl	r1, r3, #31
 80064fa:	005b      	lslpl	r3, r3, #1
 80064fc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006500:	0fd9      	lsrs	r1, r3, #31
 8006502:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006506:	2516      	movs	r5, #22
 8006508:	4620      	mov	r0, r4
 800650a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650e:	107f      	asrs	r7, r7, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	1846      	adds	r6, r0, r1
 8006514:	4296      	cmp	r6, r2
 8006516:	bfde      	ittt	le
 8006518:	1b92      	suble	r2, r2, r6
 800651a:	1870      	addle	r0, r6, r1
 800651c:	1864      	addle	r4, r4, r1
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	3d01      	subs	r5, #1
 8006522:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006526:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800652a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800652e:	d1f0      	bne.n	8006512 <__ieee754_sqrt+0x8e>
 8006530:	4629      	mov	r1, r5
 8006532:	f04f 0e20 	mov.w	lr, #32
 8006536:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800653a:	4282      	cmp	r2, r0
 800653c:	eb06 0c05 	add.w	ip, r6, r5
 8006540:	dc02      	bgt.n	8006548 <__ieee754_sqrt+0xc4>
 8006542:	d113      	bne.n	800656c <__ieee754_sqrt+0xe8>
 8006544:	459c      	cmp	ip, r3
 8006546:	d811      	bhi.n	800656c <__ieee754_sqrt+0xe8>
 8006548:	f1bc 0f00 	cmp.w	ip, #0
 800654c:	eb0c 0506 	add.w	r5, ip, r6
 8006550:	da43      	bge.n	80065da <__ieee754_sqrt+0x156>
 8006552:	2d00      	cmp	r5, #0
 8006554:	db41      	blt.n	80065da <__ieee754_sqrt+0x156>
 8006556:	f100 0801 	add.w	r8, r0, #1
 800655a:	1a12      	subs	r2, r2, r0
 800655c:	4640      	mov	r0, r8
 800655e:	459c      	cmp	ip, r3
 8006560:	bf88      	it	hi
 8006562:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006566:	eba3 030c 	sub.w	r3, r3, ip
 800656a:	4431      	add	r1, r6
 800656c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006570:	f1be 0e01 	subs.w	lr, lr, #1
 8006574:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006578:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800657c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006580:	d1db      	bne.n	800653a <__ieee754_sqrt+0xb6>
 8006582:	4313      	orrs	r3, r2
 8006584:	d006      	beq.n	8006594 <__ieee754_sqrt+0x110>
 8006586:	1c48      	adds	r0, r1, #1
 8006588:	bf0b      	itete	eq
 800658a:	4671      	moveq	r1, lr
 800658c:	3101      	addne	r1, #1
 800658e:	3401      	addeq	r4, #1
 8006590:	f021 0101 	bicne.w	r1, r1, #1
 8006594:	1063      	asrs	r3, r4, #1
 8006596:	0849      	lsrs	r1, r1, #1
 8006598:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800659c:	07e2      	lsls	r2, r4, #31
 800659e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80065a2:	bf48      	it	mi
 80065a4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80065a8:	460e      	mov	r6, r1
 80065aa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80065ae:	e782      	b.n	80064b6 <__ieee754_sqrt+0x32>
 80065b0:	0ada      	lsrs	r2, r3, #11
 80065b2:	3815      	subs	r0, #21
 80065b4:	055b      	lsls	r3, r3, #21
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d0fa      	beq.n	80065b0 <__ieee754_sqrt+0x12c>
 80065ba:	02d5      	lsls	r5, r2, #11
 80065bc:	d50a      	bpl.n	80065d4 <__ieee754_sqrt+0x150>
 80065be:	f1c1 0420 	rsb	r4, r1, #32
 80065c2:	fa23 f404 	lsr.w	r4, r3, r4
 80065c6:	1e4d      	subs	r5, r1, #1
 80065c8:	408b      	lsls	r3, r1
 80065ca:	4322      	orrs	r2, r4
 80065cc:	1b41      	subs	r1, r0, r5
 80065ce:	e789      	b.n	80064e4 <__ieee754_sqrt+0x60>
 80065d0:	4608      	mov	r0, r1
 80065d2:	e7f0      	b.n	80065b6 <__ieee754_sqrt+0x132>
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	3101      	adds	r1, #1
 80065d8:	e7ef      	b.n	80065ba <__ieee754_sqrt+0x136>
 80065da:	4680      	mov	r8, r0
 80065dc:	e7bd      	b.n	800655a <__ieee754_sqrt+0xd6>
 80065de:	bf00      	nop
 80065e0:	7ff00000 	.word	0x7ff00000

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
